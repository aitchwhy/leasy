---
#taskmaster: prd
tag: demo-mvp
title: Property-Finance Demo MVP â€” **Technical Design & Functional Spec**
model: claude-code/opus
version: 0.4
updated: 2025-07-23
---

## 1 Â· Functional Requirements (âœ±â€†= minimum testable behaviour)

### 1.1 Core Use-Cases & Endpoints

| ID | Endpoint | Method | Description | Request Body / Query | Response (200/201) | Error Codes |
|----|----------|--------|-------------|----------------------|--------------------|-------------|
| **FR-01âœ±** | `/buildings` | **GET** | Return all buildings visible to the current owner. | â€” | `[{ building_id, name, address }]` | 500 (server) |
| **FR-02âœ±** | `/leases?building_id` | GET | Return active leases for a building. | `building_id` query | `[{ lease_id, tenant_name, rent_amount }]` | 404 (unknown building) |
| **FR-03âœ±** | `/invoices` | **POST** | Generate an invoice for a lease. | `{ lease_id, issue_date?, due_date? }` | `{ invoice_id }` (201) | 422 (validation), 404 (unknown lease) |
| **FR-04** | `/invoices/:id` | GET | Fetch single invoice (for future PDF). | â€” | `{ invoice_id, lines[] }` | 404 |
| **FR-05** | `/healthz` | GET | Liveness probe. | â€” | `ok` | â€” |

**Acceptance Criteria (BDD):**

* **Given** the API is running in prod **when** a GET is made to `/buildings` **then** HTTP 200 + JSON array length â‰¥ 1.
* **Given** a valid `lease_id` **when** POST `/invoices` **then** HTTP 201 with non-null `invoice_id`.
* **Given** an invalid body (missing `lease_id`) **when** POST `/invoices` **then** HTTP 422.
* UI must render building list within **3 s** p95 and show a toast on successful invoice generation.

> *All acceptance tests are automated via Vitest (unit) and Playwright (e2e) hitting **production** URLs.*

---

## 2 Â· Technical Architecture

### 2.1 C4 Container View

![C4 Diagram](../../c4.png "Containers")

| Container | Tech / Runtime | Responsibilities | Notes |
|-----------|----------------|------------------|-------|
| **Web SPA** | React 18 + Vite 5 (TypeScript) deployed on **Vercel** | UI, routing, fetch API, optimistic updates, toast notifications. | Public URL: `https://<project>.vercel.app` |
| **API Worker** | Hono 4.x (TypeScript) on **Cloudflare Workers** | Expose REST endpoints, hold in-memory arrays for buildings, leases, invoices. | Public URL: `https://demo-api.<hash>.workers.dev` |
| **(future) DB** | Postgres (RDS) | Persistent storage. | **Not in MVP** |
| **(future) Storage** | S3 bucket (receipts) | PDF & attachment storage. | **Not in MVP** |
| **Observability** | Cloudflare `wrangler tail` + Dashboard | Request/response logs; 4xx/5xx counters. | Upgrade to OTEL later |

### 2.2 Runtime Environment & Deploy Steps

```mermaid
sequenceDiagram
    participant DevLaptop
    participant GitHub
    participant Vercel
    participant CF as Cloudflare Workers

    DevLaptop->>GitHub: git push main
    GitHub-->>Vercel: Webhook â€“ build & deploy SPA
    GitHub-->>CF: GitHub Action â‡’ wrangler publish API
    Vercel-->>DevLaptop: deployment url âœš commit sha
    CF-->>DevLaptop: wrangler publish log + api url

	â€¢	Auth: none (public demo).
	â€¢	CORS: Worker allows origins matching *.vercel.app.
	â€¢	Env vars:
	â€¢	SPA: VITE_API_URL=https://demo-apiâ€¦workers.dev
	â€¢	Worker: none required for MVP.

2.3 Data Model (ERD Extract)

Arrays back these entities during MVP; each is instantiated from seed JSON at boot.

2.4 Build & Test Pipeline

CI (GitHub Actions)
â”œâ”€ðŸ¤– Lint          (ESLint + Prettier)
â”œâ”€ðŸ§ª Unit Tests    (Vitest)
â”œâ”€ðŸ”§ Build
â”‚   â”œâ”€ SPA (Vite build)
â”‚   â””â”€ API (TypeScript â†’ Worker bundle)
â”œâ”€ðŸš€ Deploy
â”‚   â”œâ”€ wrangler publish  (# API)
â”‚   â””â”€ Vercel deploy     (# SPA)
â””â”€ðŸŽ­ Playwright e2e (prod URLs)

Pipeline fails if any step non-zero or e2e test fails.

â¸»

3 Â· Detailed Component Design

Component	Interfaces	Key Logic	Future Extension
api/routes/buildings.ts	GET /buildings	Returns static array.	Replace with DB query + tenant filter.
api/routes/invoices.ts	POST /invoices	Validates body (Zod), pushes object to invoices[].	Add Stripe webhook + PDF gen.
ui/hooks/useBuildings.ts	fetch('${API}/buildings')	React Query cache, stale-while-revalidate.	Pagination, search.
ui/components/InvoiceButton.tsx	Calls POST /invoices; shows toast.	Disable on loading/error; optimistic row insert.


â¸»

4 Â· Security & Compliance Notes (MVP)
	â€¢	Secrets: none stored; no DB creds.
	â€¢	Headers: Worker adds X-Content-Type-Options: nosniff and CORS.
	â€¢	Rate limiting / auth: deferred.

â¸»

5 Â· Glossary

Term	Meaning
Worker	Edge-deployed JS function on Cloudflare Workers runtime.
In-memory	Data held in module-scope arrays; cleared on redeploy.
Toast	UI pop-up confirming success or error.


â¸»

6 Â· Open Technical Decisions
	1.	Persist demo data between deployments? (If yes, use Workers KV).
	2.	Use TypeSpec code-gen immediately or after MVP?

â¸»


This trimmed PRD focuses **only** on:

* **Functional Requirements** â€“ endpoints, acceptance tests, error semantics.
* **Technical Architecture** â€“ containers, runtime flow, build pipeline, core components.

Everything else (personas, timeline, tasks, marketing copy) has been removed per request.
Save the file and run **Task Master** to explode it into actionable tasks for Claude Code Opus 4.
