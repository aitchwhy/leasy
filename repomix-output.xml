This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

</file_summary>

<directory_structure>
.claude/
  settings.local.json
.cursor/
  rules/
    use-bun-instead-of-node-vite-npm-pnpm.mdc
apps/
  client/
    src/
      App.tsx
      main.tsx
      style.css
    index.html
    package.json
    postcss.config.js
    tailwind.config.js
    tsconfig.json
    vite.config.ts
  server/
    src/
      index.ts
    package.json
    tsconfig.json
docs/
  arch/
    c4-context-diagram.md
  db/
    schema.ts
  tests/
    e2e/
      api.spec.ts
      auth.spec.ts
      dashboard.spec.ts
      hello-world.spec.ts
      invoices.spec.ts
      react-app.spec.ts
      simple-auth.spec.ts
      simple-dashboard.spec.ts
      smoke.spec.ts
      tenants.spec.ts
      ui.spec.ts
      user-flow.spec.ts
    test-readme.md
    test-scenarios.md
  TODO.md
tests/
  e2e/
    health.spec.ts
    TEST_CASES.md
.gitignore
CLAUDE.md
package.json
playwright.config.ts
README.md
tsconfig.json
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="tests/e2e/health.spec.ts">
// (1) write list of test scenarios to cover
// (2) implement exactly 1 test case into runnable (which fails)
// (3) change code to make test + previous tests pass
// (4) (optional) refactor to improve code
// (5) repeat from 2 until all tests covered

import { expect, test } from '@playwright/test'

test('GET / returns 200 OK Hello World', async({request}) => {
    const res = await request.get("/")
    expect(res.status()).toBe(200)
})
</file>

<file path=".cursor/rules/use-bun-instead-of-node-vite-npm-pnpm.mdc">
---
description: Use Bun instead of Node.js, npm, pnpm, or vite.
globs: "*.ts, *.tsx, *.html, *.css, *.js, *.jsx, package.json"
alwaysApply: false
---

Default to using Bun instead of Node.js.

- Use `bun <file>` instead of `node <file>` or `ts-node <file>`
- Use `bun test` instead of `jest` or `vitest`
- Use `bun build <file.html|file.ts|file.css>` instead of `webpack` or `esbuild`
- Use `bun install` instead of `npm install` or `yarn install` or `pnpm install`
- Use `bun run <script>` instead of `npm run <script>` or `yarn run <script>` or `pnpm run <script>`
- Bun automatically loads .env, so don't use dotenv.

## APIs

- `Bun.serve()` supports WebSockets, HTTPS, and routes. Don't use `express`.
- `bun:sqlite` for SQLite. Don't use `better-sqlite3`.
- `Bun.redis` for Redis. Don't use `ioredis`.
- `Bun.sql` for Postgres. Don't use `pg` or `postgres.js`.
- `WebSocket` is built-in. Don't use `ws`.
- Prefer `Bun.file` over `node:fs`'s readFile/writeFile
- Bun.$`ls` instead of execa.

## Testing

Use `bun test` to run tests.

```ts#index.test.ts
import { test, expect } from "bun:test";

test("hello world", () => {
  expect(1).toBe(1);
});
```

## Frontend

Use HTML imports with `Bun.serve()`. Don't use `vite`. HTML imports fully support React, CSS, Tailwind.

Server:

```ts#index.ts
import index from "./index.html"

Bun.serve({
  routes: {
    "/": index,
    "/api/users/:id": {
      GET: (req) => {
        return new Response(JSON.stringify({ id: req.params.id }));
      },
    },
  },
  // optional websocket support
  websocket: {
    open: (ws) => {
      ws.send("Hello, world!");
    },
    message: (ws, message) => {
      ws.send(message);
    },
    close: (ws) => {
      // handle close
    }
  },
  development: {
    hmr: true,
    console: true,
  }
})
```

HTML files can import .tsx, .jsx or .js files directly and Bun's bundler will transpile & bundle automatically. `<link>` tags can point to stylesheets and Bun's CSS bundler will bundle.

```html#index.html
<html>
  <body>
    <h1>Hello, world!</h1>
    <script type="module" src="./frontend.tsx"></script>
  </body>
</html>
```

With the following `frontend.tsx`:

```tsx#frontend.tsx
import React from "react";

// import .css files directly and it works
import './index.css';

import { createRoot } from "react-dom/client";

const root = createRoot(document.body);

export default function Frontend() {
  return <h1>Hello, world!</h1>;
}

root.render(<Frontend />);
```

Then, run index.ts

```sh
bun --hot ./index.ts
```

For more information, read the Bun API docs in `node_modules/bun-types/docs/**.md`.
</file>

<file path="apps/client/src/App.tsx">
import React from 'react'

function App() {
  return (
    <div className="min-h-screen bg-gray-50">
      <div className="container mx-auto py-8">
        <h1 className="text-4xl font-bold text-center">Hello World</h1>
      </div>
    </div>
  )
}

export default App
</file>

<file path="apps/client/src/main.tsx">
import React from 'react'
import ReactDOM from 'react-dom/client'
import App from './App'
import './style.css'

ReactDOM.createRoot(document.getElementById('root')!).render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
)
</file>

<file path="apps/client/src/style.css">
@tailwind base;
@tailwind components;
@tailwind utilities;
</file>

<file path="apps/client/index.html">
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Leasy - Invoice Generator</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.tsx"></script>
  </body>
</html>
</file>

<file path="apps/client/package.json">
{
  "name": "@leasy/client",
  "version": "1.0.0",
  "type": "module",
  "private": true,
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "preview": "vite preview",
    "typecheck": "tsc --noEmit",
    "lint": "eslint src --ext .ts,.tsx",
    "lint:fix": "eslint src --ext .ts,.tsx --fix"
  },
  "dependencies": {
    "hono": "^4.8.10",
    "react": "^19.0.0",
    "react-dom": "^19.0.0",
    "@tanstack/react-query": "^5.64.0"
  },
  "devDependencies": {
    "@cloudflare/vite-plugin": "^1.2.3",
    "@types/react": "^19.0.6",
    "@types/react-dom": "^19.0.3",
    "@typescript-eslint/eslint-plugin": "^8.20.0",
    "@typescript-eslint/parser": "^8.20.0",
    "@vitejs/plugin-react": "^4.3.4",
    "autoprefixer": "^10.4.20",
    "eslint": "^9.18.0",
    "eslint-plugin-react": "^7.37.3",
    "eslint-plugin-react-hooks": "^5.1.0",
    "postcss": "^8.5.0",
    "tailwindcss": "^3.4.17",
    "vite": "^6.3.5",
    "vite-ssr-components": "^0.3.0"
  }
}
</file>

<file path="apps/client/postcss.config.js">
export default {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}
</file>

<file path="apps/client/tailwind.config.js">
/** @type {import('tailwindcss').Config} */
export default {
  content: [
    "./index.html",
    "./src/**/*.{js,ts,jsx,tsx}",
  ],
  theme: {
    extend: {},
  },
  plugins: [],
}
</file>

<file path="apps/client/tsconfig.json">
{
  "extends": "../../tsconfig.json",
  "compilerOptions": {
    "target": "ES2020",
    "lib": ["ES2020", "DOM", "DOM.Iterable"],
    "jsx": "react-jsx",
    "jsxImportSource": "react",
    "paths": {
      "@/*": ["./src/*"]
    }
  },
  "include": ["src/**/*"],
  "exclude": ["node_modules", "dist"]
}
</file>

<file path="apps/client/vite.config.ts">
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'
import path from 'path'

export default defineConfig({
  plugins: [react()],
  resolve: {
    alias: {
      '@': path.resolve(__dirname, './src')
    }
  },
  server: {
    port: 5173,
    proxy: {
      '/api': {
        target: 'http://localhost:8787',
        changeOrigin: true
      }
    }
  }
})
</file>

<file path="apps/server/tsconfig.json">
{
  "compilerOptions": {
    "target": "ESNext",
    "module": "ESNext",
    "moduleResolution": "Bundler",
    "strict": true,
    "skipLibCheck": true,
    "lib": [
      "ESNext"
    ],
    "jsx": "react-jsx",
    "jsxImportSource": "hono/jsx"
  },
}
</file>

<file path="docs/arch/c4-context-diagram.md">
Of course, here is the C4 diagram in Mermaid.js format.

`c4-context-diagram.md`

```mermaid
C4Context
  title System Context diagram for Property Management App

  Person(propertyOwner, "Property Owner", "Manages their properties, leases, and payments.")

  System(spa, "Web Application", "React + Vite Single Page Application providing the user interface.")
  System(api, "Hono API", "Cloudflare Worker providing a RESTful API for the web application.")

  System_Ext(db, "Postgres Database", "Stores all property, tenant, lease, and payment information. (AWS RDS)")
  System_Ext(storage, "S3 Bucket", "Stores uploaded files like receipts and lease agreements.")
  System_Ext(monitoring, "Grafana / OTEL", "Collects and displays metrics and logs for observability.")

  Rel(propertyOwner, spa, "Uses", "HTTPS")
  Rel(spa, api, "Makes API calls to", "JSON/HTTPS")
  Rel(api, db, "Reads from and writes to")
  Rel(api, storage, "Uploads and retrieves files from")
  Rel(api, monitoring, "Sends telemetry data to")
```
</file>

<file path="docs/db/schema.ts">
import {
    date,
    decimal,
    pgEnum,
    pgTable,
    serial,
    varchar
} from "drizzle-orm/pg-core";

  export const building = pgTable("Building", {
    building_id: serial("building_id").primaryKey(),
    name: varchar("name", { length: 255 }),
    address: varchar("address", { length: 255 }),
  });

  export const tenant = pgTable("Tenant", {
    tenant_id: serial("tenant_id").primaryKey(),
    name: varchar("name", { length: 255 }),
    contact: varchar("contact", { length: 255 }),
  });

  export const leaseContract = pgTable(
    "LeaseContract",
    {
      lease_id: serial("lease_id").primaryKey(),
      building_id: serial("building_id").references(
        () => building.building_id
      ),
      tenant_id: serial("tenant_id").references(() => tenant.tenant_id),
      start_date: date("start_date"),
      end_date: date("end_date"),
      rent_amount: decimal("rent_amount", { precision: 10, scale: 2 }),
    },
  );

  export const invoiceStatusEnum = pgEnum("invoice_status", [
    "draft",
    "sent",
    "paid",
    "void",
  ]);

  export const invoice = pgTable(
    "Invoice",
    {
      invoice_id: serial("invoice_id").primaryKey(),
      lease_id: serial("lease_id").references(() => leaseContract.lease_id),
      issue_date: date("issue_date"),
      due_date: date("due_date"),
      total_amount: decimal("total_amount", { precision: 10, scale: 2 }),
      status: invoiceStatusEnum("status"),
    },
  );

  export const payment = pgTable(
    "Payment",
    {
      payment_id: serial("payment_id").primaryKey(),
      invoice_id: serial("invoice_id").references(() => invoice.invoice_id),
      payment_date: date("payment_date"),
      amount: decimal("amount", { precision: 10, scale: 2 }),
    },
  );
</file>

<file path="docs/tests/e2e/api.spec.ts">
import { test, expect } from '@playwright/test'

test.describe('API Endpoints', () => {
  test('FR-01: GET /api/buildings returns building list', async ({ request }) => {
    const response = await request.get('/api/buildings')
    
    expect(response.status()).toBe(200)
    
    const buildings = await response.json()
    expect(Array.isArray(buildings)).toBe(true)
    expect(buildings.length).toBeGreaterThanOrEqual(1)
    
    // Verify building structure
    const building = buildings[0]
    expect(building).toHaveProperty('building_id')
    expect(building).toHaveProperty('name')
    expect(building).toHaveProperty('address')
  })
  
  test('FR-02: GET /api/leases returns leases for a building', async ({ request }) => {
    // First get buildings
    const buildingsResponse = await request.get('/api/buildings')
    const buildings = await buildingsResponse.json()
    const buildingId = buildings[0].building_id
    
    // Get leases for first building
    const response = await request.get(`/api/leases?building_id=${buildingId}`)
    
    expect(response.status()).toBe(200)
    
    const leases = await response.json()
    expect(Array.isArray(leases)).toBe(true)
    
    // Verify lease structure if we have leases
    if (leases.length > 0) {
      const lease = leases[0]
      expect(lease).toHaveProperty('lease_id')
      expect(lease).toHaveProperty('tenant_name')
      expect(lease).toHaveProperty('rent_amount')
    }
  })
  
  test('FR-02: GET /api/leases returns 404 for unknown building', async ({ request }) => {
    const response = await request.get('/api/leases?building_id=unknown-building')
    
    expect(response.status()).toBe(404)
    
    const error = await response.json()
    expect(error).toHaveProperty('error')
    expect(error.error).toContain('Unknown building')
  })
  
  test('FR-03: POST /api/invoices creates invoice with valid lease', async ({ request }) => {
    // First get a valid lease
    const buildingsResponse = await request.get('/api/buildings')
    const buildings = await buildingsResponse.json()
    const buildingId = buildings[0].building_id
    
    const leasesResponse = await request.get(`/api/leases?building_id=${buildingId}`)
    const leases = await leasesResponse.json()
    const leaseId = leases[0].lease_id
    
    // Create invoice
    const response = await request.post('/api/invoices', {
      data: {
        lease_id: leaseId
      }
    })
    
    expect(response.status()).toBe(201)
    
    const result = await response.json()
    expect(result).toHaveProperty('invoice_id')
    expect(result.invoice_id).toBeTruthy()
  })
  
  test('FR-03: POST /api/invoices returns 422 for invalid body', async ({ request }) => {
    const response = await request.post('/api/invoices', {
      data: {
        // Missing lease_id
      }
    })
    
    expect(response.status()).toBe(422)
    
    const error = await response.json()
    expect(error).toHaveProperty('error')
    expect(error.error).toContain('Validation failed')
  })
  
  test('FR-03: POST /api/invoices returns 404 for unknown lease', async ({ request }) => {
    const response = await request.post('/api/invoices', {
      data: {
        lease_id: 'unknown-lease-id'
      }
    })
    
    expect(response.status()).toBe(404)
    
    const error = await response.json()
    expect(error).toHaveProperty('error')
    expect(error.error).toContain('Unknown lease')
  })
  
  test('FR-04: GET /api/invoices/:id returns invoice details', async ({ request }) => {
    // First create an invoice
    const buildingsResponse = await request.get('/api/buildings')
    const buildings = await buildingsResponse.json()
    const buildingId = buildings[0].building_id
    
    const leasesResponse = await request.get(`/api/leases?building_id=${buildingId}`)
    const leases = await leasesResponse.json()
    const leaseId = leases[0].lease_id
    
    const createResponse = await request.post('/api/invoices', {
      data: {
        lease_id: leaseId
      }
    })
    const { invoice_id } = await createResponse.json()
    
    // Get the invoice
    const response = await request.get(`/api/invoices/${invoice_id}`)
    
    expect(response.status()).toBe(200)
    
    const invoice = await response.json()
    expect(invoice).toHaveProperty('invoice_id')
    expect(invoice).toHaveProperty('lines')
    expect(Array.isArray(invoice.lines)).toBe(true)
  })
  
  test('FR-04: GET /api/invoices/:id returns 404 for unknown invoice', async ({ request }) => {
    const response = await request.get('/api/invoices/unknown-invoice-id')
    
    expect(response.status()).toBe(404)
    
    const error = await response.json()
    expect(error).toHaveProperty('error')
    expect(error.error).toContain('Invoice not found')
  })
  
  test('FR-05: GET /api/healthz returns ok', async ({ request }) => {
    const response = await request.get('/api/healthz')
    
    expect(response.status()).toBe(200)
    
    const text = await response.text()
    expect(text).toBe('ok')
  })
})
</file>

<file path="docs/tests/e2e/auth.spec.ts">
import { expect, test } from '@playwright/test'

test.describe('Mock Authentication API', () => {
  const API_BASE = process.env.API_URL || 'http://localhost:5173/api'

  test('POST /api/auth/mock-login accepts "Il Keun Lee" and returns success', async ({ request }) => {
    const response = await request.post(`${API_BASE}/auth/mock-login`, {
      data: {
        name: 'Il Keun Lee'
      }
    })

    expect(response.ok()).toBeTruthy()
    expect(response.status()).toBe(200)

    const body = await response.json()
    expect(body).toHaveProperty('token')
    expect(body).toHaveProperty('user')
    expect(body.user).toMatchObject({
      name: 'Il Keun Lee',
      role: 'owner'
    })
  })

  test('Mock login creates a session token', async ({ request }) => {
    const response = await request.post(`${API_BASE}/auth/mock-login`, {
      data: {
        name: 'Il Keun Lee'
      }
    })

    const body = await response.json()
    expect(body.token).toBeTruthy()
    expect(typeof body.token).toBe('string')
    expect(body.token.length).toBeGreaterThan(0)
  })

  test('Invalid/empty name returns 400 error', async ({ request }) => {
    // Test empty name
    const emptyResponse = await request.post(`${API_BASE}/auth/mock-login`, {
      data: {
        name: ''
      }
    })

    expect(emptyResponse.status()).toBe(400)
    const emptyBody = await emptyResponse.json()
    expect(emptyBody).toHaveProperty('error')

    // Test missing name field
    const missingResponse = await request.post(`${API_BASE}/auth/mock-login`, {
      data: {}
    })

    expect(missingResponse.status()).toBe(400)
    const missingBody = await missingResponse.json()
    expect(missingBody).toHaveProperty('error')
  })

  test('Session persists across requests', async ({ request }) => {
    // First, login
    const loginResponse = await request.post(`${API_BASE}/auth/mock-login`, {
      data: {
        name: 'Il Keun Lee'
      }
    })

    const { token } = await loginResponse.json()

    // Then, make authenticated request
    const dashboardResponse = await request.get(`${API_BASE}/dashboard`, {
      headers: {
        'Authorization': `Bearer ${token}`
      }
    })

    expect(dashboardResponse.ok()).toBeTruthy()
  })

  test('Logout clears session', async ({ request }) => {
    // First, login
    const loginResponse = await request.post(`${API_BASE}/auth/mock-login`, {
      data: {
        name: 'Il Keun Lee'
      }
    })

    const { token } = await loginResponse.json()

    // Then, logout
    const logoutResponse = await request.post(`${API_BASE}/auth/logout`, {
      headers: {
        'Authorization': `Bearer ${token}`
      }
    })

    expect(logoutResponse.ok()).toBeTruthy()

    // Try to access protected route
    const dashboardResponse = await request.get(`${API_BASE}/dashboard`, {
      headers: {
        'Authorization': `Bearer ${token}`
      }
    })

    expect(dashboardResponse.status()).toBe(401)
  })
})
</file>

<file path="docs/tests/e2e/dashboard.spec.ts">
import { expect, test } from '@playwright/test'

test.describe('Dashboard API', () => {
  const API_BASE = process.env.API_URL || 'http://localhost:5173/api'
  let authToken: string

  test.beforeEach(async ({ request }) => {
    // Login before each test
    const loginResponse = await request.post(`${API_BASE}/auth/mock-login`, {
      data: {
        name: 'Il Keun Lee'
      }
    })
    const loginData = await loginResponse.json()
    authToken = loginData.token
  })

  test('GET /api/dashboard returns building data for logged-in user', async ({ request }) => {
    const response = await request.get(`${API_BASE}/dashboard`, {
      headers: {
        'Authorization': `Bearer ${authToken}`
      }
    })

    expect(response.ok()).toBeTruthy()
    expect(response.status()).toBe(200)

    const body = await response.json()
    expect(body).toHaveProperty('building')
    expect(body).toHaveProperty('summary')
  })

  test('Dashboard shows PNL building information', async ({ request }) => {
    const response = await request.get(`${API_BASE}/dashboard`, {
      headers: {
        'Authorization': `Bearer ${authToken}`
      }
    })

    const body = await response.json()
    expect(body.building).toMatchObject({
      id: 'pnl-001',
      name: 'PNL Building',
      address: '서울특별시 강남구 논현로 159길 17',
      owner: 'Il Keun Lee'
    })
  })

  test('Dashboard calculates total monthly revenue correctly (₩27,333,581)', async ({ request }) => {
    const response = await request.get(`${API_BASE}/dashboard`, {
      headers: {
        'Authorization': `Bearer ${authToken}`
      }
    })

    const body = await response.json()
    // The exact amount from the Excel sheet: ₩27,333,581
    expect(body.building.monthlyRevenue).toBe(27333581)
    expect(body.summary.totalMonthlyRevenue).toBe(27333581)
  })

  test('Dashboard shows correct tenant count (12 occupied units)', async ({ request }) => {
    const response = await request.get(`${API_BASE}/dashboard`, {
      headers: {
        'Authorization': `Bearer ${authToken}`
      }
    })

    const body = await response.json()
    expect(body.building.totalUnits).toBe(13)
    expect(body.building.occupiedUnits).toBe(12)
    expect(body.summary.totalTenants).toBe(12)
  })

  test('Unauthorized request returns 401 error', async ({ request }) => {
    // Request without token
    const response = await request.get(`${API_BASE}/dashboard`)

    expect(response.status()).toBe(401)
    const body = await response.json()
    expect(body).toHaveProperty('error')
    expect(body.error).toBe('Unauthorized')
  })
})
</file>

<file path="docs/tests/e2e/hello-world.spec.ts">
import { test, expect } from '@playwright/test'

test('displays exactly Hello World', async ({ page }) => {
  await page.goto('/')
  await expect(page.locator('h1')).toHaveText('Hello World')
})
</file>

<file path="docs/tests/e2e/invoices.spec.ts">
import { expect, test } from '@playwright/test'

test.describe('Invoice Generation API', () => {
  const API_BASE = process.env.API_URL || 'http://localhost:5173/api'
  let authToken: string

  test.beforeEach(async ({ request }) => {
    // Login before each test
    const loginResponse = await request.post(`${API_BASE}/auth/mock-login`, {
      data: {
        name: 'Il Keun Lee'
      }
    })
    const loginData = await loginResponse.json()
    authToken = loginData.token
  })

  test('POST /api/invoices/generate accepts period and tenant list', async ({ request }) => {
    const response = await request.post(`${API_BASE}/invoices/generate`, {
      headers: {
        'Authorization': `Bearer ${authToken}`,
        'Content-Type': 'application/json'
      },
      data: {
        period: '2025년 5월',
        tenantIds: ['tenant-b102', 'tenant-101']
      }
    })

    expect(response.ok()).toBeTruthy()
    expect(response.status()).toBe(201)

    const body = await response.json()
    expect(body).toHaveProperty('invoices')
    expect(body).toHaveProperty('count')
    expect(body.count).toBe(2)
  })

  test('Generated invoice contains all required fields', async ({ request }) => {
    const response = await request.post(`${API_BASE}/invoices/generate`, {
      headers: {
        'Authorization': `Bearer ${authToken}`,
        'Content-Type': 'application/json'
      },
      data: {
        period: '2025년 5월',
        tenantIds: ['tenant-301'] // 서울브레인신경과
      }
    })

    const body = await response.json()
    expect(body.invoices).toHaveLength(1)

    const invoice = body.invoices[0]
    expect(invoice).toHaveProperty('id')
    expect(invoice).toHaveProperty('tenantName')
    expect(invoice).toHaveProperty('amount')
    expect(invoice.tenantName).toBe('서울브레인신경과')
  })

  test('Invoice calculates rent + electricity + water correctly', async ({ request }) => {
    const response = await request.post(`${API_BASE}/invoices/generate`, {
      headers: {
        'Authorization': `Bearer ${authToken}`,
        'Content-Type': 'application/json'
      },
      data: {
        period: '2025년 5월',
        tenantIds: ['tenant-301'] // Unit 301
      }
    })

    const body = await response.json()
    const invoice = body.invoices[0]

    // From Excel: 301 - 서울브레인신경과
    // Rent: 3,500,000 + Electricity: 144,692 + Water: 29,159 + VAT = 4,023,851
    expect(invoice.amount).toBe(4023851)
  })

  test('Multiple invoices can be generated in one request', async ({ request }) => {
    const response = await request.post(`${API_BASE}/invoices/generate`, {
      headers: {
        'Authorization': `Bearer ${authToken}`,
        'Content-Type': 'application/json'
      },
      data: {
        period: '2025년 5월',
        tenantIds: ['tenant-b102', 'tenant-101', 'tenant-102', 'tenant-201', 'tenant-202']
      }
    })

    const body = await response.json()
    expect(body.count).toBe(5)
    expect(body.invoices).toHaveLength(5)

    // Verify each invoice has correct structure
    body.invoices.forEach((invoice: any) => {
      expect(invoice.id).toBeTruthy()
      expect(invoice.tenantName).toBeTruthy()
      expect(invoice.amount).toBeGreaterThan(0)
    })
  })

  test('GET /api/invoices/{id}/pdf returns PDF file', async ({ request }) => {
    // First generate an invoice
    const generateResponse = await request.post(`${API_BASE}/invoices/generate`, {
      headers: {
        'Authorization': `Bearer ${authToken}`,
        'Content-Type': 'application/json'
      },
      data: {
        period: '2025년 5월',
        tenantIds: ['tenant-301']
      }
    })

    const { invoices } = await generateResponse.json()
    const invoiceId = invoices[0].id

    // Then download the PDF
    const pdfResponse = await request.get(`${API_BASE}/invoices/${invoiceId}/pdf`, {
      headers: {
        'Authorization': `Bearer ${authToken}`
      }
    })

    expect(pdfResponse.ok()).toBeTruthy()
    expect(pdfResponse.headers()['content-type']).toBe('application/pdf')
    expect(pdfResponse.headers()['content-disposition']).toContain(`invoice-${invoiceId}.pdf`)
  })
})
</file>

<file path="docs/tests/e2e/react-app.spec.ts">
import { test, expect } from '@playwright/test'

test('React app renders with Hello World', async ({ page }) => {
  await page.goto('/')
  
  // Should have the React app running
  await expect(page.locator('h1')).toHaveText('Hello World')
  
  // Should have a root div typical of React apps
  await expect(page.locator('#root')).toBeVisible()
})
</file>

<file path="docs/tests/e2e/simple-auth.spec.ts">
import { test, expect } from '@playwright/test'

test('mock login API accepts Il Keun Lee', async ({ request }) => {
  const response = await request.post('http://localhost:8787/api/auth/mock-login', {
    data: {
      name: 'Il Keun Lee'
    }
  })

  expect(response.ok()).toBeTruthy()
  expect(response.status()).toBe(200)

  const body = await response.json()
  expect(body).toHaveProperty('token')
  expect(body).toHaveProperty('user')
  expect(body.user).toMatchObject({
    name: 'Il Keun Lee',
    role: 'owner'
  })
})
</file>

<file path="docs/tests/e2e/simple-dashboard.spec.ts">
import { test, expect } from '@playwright/test'

test('dashboard API returns building data', async ({ request }) => {
  // First login to get token
  const loginResponse = await request.post('http://localhost:8787/api/auth/mock-login', {
    data: { name: 'Il Keun Lee' }
  })
  const { token } = await loginResponse.json()
  
  // Then get dashboard data
  const response = await request.get('http://localhost:8787/api/dashboard', {
    headers: {
      'Authorization': `Bearer ${token}`
    }
  })
  
  expect(response.ok()).toBeTruthy()
  expect(response.status()).toBe(200)
  
  const body = await response.json()
  expect(body).toHaveProperty('building')
  expect(body.building).toMatchObject({
    name: 'PNL',
    owner: 'Il Keun Lee'
  })
  expect(body).toHaveProperty('metrics')
  expect(body.metrics).toHaveProperty('monthlyRevenue')
})
</file>

<file path="docs/tests/e2e/smoke.spec.ts">
import { test, expect } from '@playwright/test'

test.describe('Smoke Test', () => {
  test('app loads successfully', async ({ page }) => {
    await page.goto('/')
    
    // App should load and redirect to dashboard
    await expect(page).toHaveURL('/dashboard')
    
    // Should have proper title
    await expect(page).toHaveTitle(/Leasy/)
    
    // Should have header with logo
    await expect(page.getByText('Leasy')).toBeVisible()
  })

  test('dashboard shows mock data', async ({ page }) => {
    await page.goto('/dashboard')
    
    // Should show dashboard title
    await expect(page.getByRole('heading', { name: 'Dashboard' })).toBeVisible()
    
    // Should show stats cards
    await expect(page.getByText('Outstanding Invoices')).toBeVisible()
    await expect(page.getByText('Monthly Revenue')).toBeVisible()
    
    // Should show invoice table
    await expect(page.getByText('Recent Invoices')).toBeVisible()
    await expect(page.getByText('ABC Corp')).toBeVisible()
  })

  test('can navigate to invoice form', async ({ page }) => {
    await page.goto('/dashboard')
    
    // Click new invoice button in the card (not in header)
    await page.getByRole('main').getByRole('link', { name: 'New Invoice' }).click()
    
    // Should navigate to invoice form
    await expect(page).toHaveURL('/invoices/new')
    await expect(page.getByRole('heading', { name: 'Generate Invoice' })).toBeVisible()
  })
})
</file>

<file path="docs/tests/e2e/tenants.spec.ts">
import { expect, test } from '@playwright/test'

test.describe('Tenants API', () => {
  const API_BASE = process.env.API_URL || 'http://localhost:5173/api'
  let authToken: string

  test.beforeEach(async ({ request }) => {
    // Login before each test
    const loginResponse = await request.post(`${API_BASE}/auth/mock-login`, {
      data: {
        name: 'Il Keun Lee'
      }
    })
    const loginData = await loginResponse.json()
    authToken = loginData.token
  })

  test('GET /api/tenants returns all PNL building tenants', async ({ request }) => {
    const response = await request.get(`${API_BASE}/tenants`, {
      headers: {
        'Authorization': `Bearer ${authToken}`
      }
    })

    expect(response.ok()).toBeTruthy()
    expect(response.status()).toBe(200)

    const tenants = await response.json()
    expect(Array.isArray(tenants)).toBeTruthy()
    expect(tenants.length).toBe(12) // 12 occupied units
  })

  test('Each tenant has correct unit number, name, and business number', async ({ request }) => {
    const response = await request.get(`${API_BASE}/tenants`, {
      headers: {
        'Authorization': `Bearer ${authToken}`
      }
    })

    const tenants = await response.json()

    // Check first tenant (B102 - 디아삽)
    const firstTenant = tenants.find((t: any) => t.unit === 'B102')
    expect(firstTenant).toMatchObject({
      unit: 'B102',
      name: '디아삽',
      businessNumber: '211-10-21870'
    })
  })

  test('Tenant data matches Excel sheet values exactly', async ({ request }) => {
    const response = await request.get(`${API_BASE}/tenants`, {
      headers: {
        'Authorization': `Bearer ${authToken}`
      }
    })

    const tenants = await response.json()

    // Check specific tenant data from Excel
    const tenant301 = tenants.find((t: any) => t.unit === '301')
    expect(tenant301).toMatchObject({
      unit: '301',
      name: '서울브레인신경과',
      businessNumber: '211-90-68256',
      monthlyRent: 3500000,
      electricityCharge: 144692,
      waterCharge: 29159
    })
  })

  test('Rent amounts are accurate for each unit', async ({ request }) => {
    const response = await request.get(`${API_BASE}/tenants`, {
      headers: {
        'Authorization': `Bearer ${authToken}`
      }
    })

    const tenants = await response.json()

    // Verify rent amounts for several units
    const rentAmounts = {
      'B102': 2080000,
      '101': 2918710,
      '102': 1620000,
      '201': 1890000,
      '202': 2000000
    }

    Object.entries(rentAmounts).forEach(([unit, expectedRent]) => {
      const tenant = tenants.find((t: any) => t.unit === unit)
      expect(tenant.monthlyRent).toBe(expectedRent)
    })
  })

  test('VAT is calculated as 10% of rent', async ({ request }) => {
    const response = await request.get(`${API_BASE}/tenants`, {
      headers: {
        'Authorization': `Bearer ${authToken}`
      }
    })

    const tenants = await response.json()

    // Check VAT calculation for each tenant
    tenants.forEach((tenant: any) => {
      const expectedVat = Math.round(tenant.monthlyRent * 0.1)
      expect(tenant.vat).toBe(expectedVat)
    })
  })
})
</file>

<file path="docs/tests/e2e/ui.spec.ts">
import { test, expect } from '@playwright/test'

test.describe('UI Acceptance Tests', () => {
  test('UI loads building list within 3 seconds', async ({ page }) => {
    const startTime = Date.now()
    
    await page.goto('/invoices/new')
    
    // Wait for building select to be enabled (indicates data loaded)
    const buildingSelect = page.locator('#building')
    await expect(buildingSelect).toBeEnabled({ timeout: 3000 })
    
    const loadTime = Date.now() - startTime
    
    // Verify load time is under 3 seconds (3000ms)
    expect(loadTime).toBeLessThan(3000)
    
    // Click on building select and verify buildings are displayed
    await buildingSelect.click()
    await expect(page.getByRole('option', { name: 'Main Plaza' })).toBeVisible()
    await expect(page.getByRole('option', { name: 'Tech Center' })).toBeVisible()
    await expect(page.getByRole('option', { name: 'West Tower' })).toBeVisible()
  })
  
  test('Invoice creation shows toast notification', async ({ page }) => {
    await page.goto('/invoices/new')
    
    // Select building
    await page.locator('#building').click()
    await page.getByRole('option', { name: 'Main Plaza' }).click()
    
    // Wait for tenants to load and select one
    await page.locator('#tenant').click()
    await page.getByRole('option', { name: 'ABC Corp' }).click()
    
    // Submit form
    await page.getByRole('button', { name: 'Generate Invoice' }).click()
    
    // Wait for toast notification
    await expect(page.getByText('Invoice created successfully')).toBeVisible({ timeout: 5000 })
    
    // Should show invoice ID in toast description
    await expect(page.getByText(/Invoice ID: inv-/)).toBeVisible()
  })
  
  test('Form populates lease data correctly', async ({ page }) => {
    await page.goto('/invoices/new')
    
    // Select building
    await page.locator('#building').click()
    await page.getByRole('option', { name: 'Main Plaza' }).click()
    
    // Select tenant
    await page.locator('#tenant').click()
    await page.getByRole('option', { name: 'ABC Corp' }).click()
    
    // Verify amount and description are populated
    const amountInput = page.locator('#amount')
    await expect(amountInput).toHaveValue('5000')
    
    const descriptionInput = page.locator('#description')
    await expect(descriptionInput).toHaveValue('Monthly Rent - ABC Corp')
  })
  
  test('Tenant dropdown is disabled until building is selected', async ({ page }) => {
    await page.goto('/invoices/new')
    
    // Initially tenant dropdown should be disabled
    const tenantTrigger = page.locator('#tenant')
    await expect(tenantTrigger).toBeDisabled()
    
    // Select building
    await page.locator('#building').click()
    await page.getByRole('option', { name: 'Tech Center' }).click()
    
    // Now tenant dropdown should be enabled
    await expect(tenantTrigger).toBeEnabled()
    
    // And should show tenants for selected building
    await tenantTrigger.click()
    await expect(page.getByRole('option', { name: 'Tech Startup Inc' })).toBeVisible()
    await expect(page.getByRole('option', { name: 'Innovation Labs' })).toBeVisible()
  })
  
  test('Form validation prevents submission without lease', async ({ page }) => {
    await page.goto('/invoices/new')
    
    // Try to submit without selecting anything
    const submitButton = page.getByRole('button', { name: 'Generate Invoice' })
    await expect(submitButton).toBeDisabled()
    
    // Select only building
    await page.locator('#building').click()
    await page.getByRole('option', { name: 'Main Plaza' }).click()
    
    // Submit should still be disabled
    await expect(submitButton).toBeDisabled()
    
    // Select tenant
    await page.locator('#tenant').click()
    await page.getByRole('option', { name: 'XYZ LLC' }).click()
    
    // Now submit should be enabled
    await expect(submitButton).toBeEnabled()
  })
})
</file>

<file path="docs/tests/e2e/user-flow.spec.ts">
import { expect, test } from '@playwright/test'

test.describe('MVP User Flow', () => {
  test.beforeEach(async ({ page }) => {
    // Start fresh by clearing localStorage
    await page.goto('http://localhost:5173')
    await page.evaluate(() => localStorage.clear())
  })

  test('Complete user flow: Login → Dashboard → Generate Invoices', async ({ page }) => {
    // Step 1: Should redirect to login when not authenticated
    await page.goto('http://localhost:5173')
    await expect(page).toHaveURL('http://localhost:5173/login')

    // Step 2: Login page should have proper form
    await expect(page.locator('h1')).toContainText('Leasy 로그인')
    await expect(page.locator('label')).toContainText('이름')
    await expect(page.locator('input[type="text"]')).toBeVisible()
    await expect(page.locator('button[type="submit"]')).toContainText('로그인')

    // Step 3: Try invalid login
    await page.fill('input[type="text"]', 'Unknown User')
    await page.click('button[type="submit"]')

    // Should show error toast
    await expect(page.locator('.toast-error')).toBeVisible()

    // Step 4: Login with correct user
    await page.fill('input[type="text"]', 'Il Keun Lee')
    await page.click('button[type="submit"]')

    // Step 5: Should redirect to dashboard
    await expect(page).toHaveURL('http://localhost:5173/dashboard')

    // Step 6: Dashboard should show building info
    await expect(page.locator('h1')).toContainText('대시보드')
    await expect(page.locator('text=PNL Building')).toBeVisible()
    await expect(page.locator('text=서울특별시 강남구')).toBeVisible()

    // Step 7: Should show tenant count and revenue
    await expect(page.locator('text=12명')).toBeVisible() // 12 tenants
    await expect(page.locator('text=₩27,333,581')).toBeVisible() // Monthly revenue

    // Step 8: Navigate to invoice generation
    await page.click('text=청구서 생성')
    await expect(page).toHaveURL('http://localhost:5173/invoices/generate')

    // Step 9: Invoice generation page should have proper elements
    await expect(page.locator('h1')).toContainText('월별 청구서 생성')
    await expect(page.locator('select')).toBeVisible() // Period selector

    // Step 10: Should show all tenants with checkboxes
    const tenants = [
      '엠에스메디칼',
      '더열린정형외과',
      '엠에스치과',
      '서울더리얼피부과',
      '서울정형외과',
      '서울브레인신경과',
      '굿모닝소아청소년과의원',
      '미소로치과',
      '명성흉부외과의원',
      '더블유외과의원',
      '더좋은정형외과의원',
      '365탑비뇨의학과의원'
    ]

    for (const tenant of tenants) {
      await expect(page.locator(`text=${tenant}`)).toBeVisible()
    }

    // All checkboxes should be checked by default
    const checkboxes = await page.locator('input[type="checkbox"]').all()
    expect(checkboxes).toHaveLength(12)
    for (const checkbox of checkboxes) {
      await expect(checkbox).toBeChecked()
    }

    // Step 11: Select period and generate invoices
    await page.selectOption('select', '2025년 1월')

    // Uncheck a few tenants
    await page.locator('text=미소로치과').locator('..').locator('input[type="checkbox"]').uncheck()
    await page.locator('text=365탑비뇨의학과의원').locator('..').locator('input[type="checkbox"]').uncheck()

    // Generate invoices
    await page.click('button:has-text("청구서 생성")')

    // Step 12: Should show success message
    await expect(page.locator('text=10개의 청구서가 생성되었습니다')).toBeVisible()

    // Step 13: Verify invoice download works
    // Note: In real test, we'd verify download, but for UI test we just check the element exists
    const downloadButtons = await page.locator('button:has-text("PDF 다운로드")').all()
    expect(downloadButtons).toHaveLength(10) // 12 - 2 unchecked = 10

    // Step 14: Test logout
    await page.click('button:has-text("로그아웃")')
    await expect(page).toHaveURL('http://localhost:5173/login')

    // Step 15: Verify can't access protected pages after logout
    await page.goto('http://localhost:5173/dashboard')
    await expect(page).toHaveURL('http://localhost:5173/login')
  })

  test('Dashboard displays accurate financial data', async ({ page }) => {
    // Login first
    await page.goto('http://localhost:5173/login')
    await page.fill('input[type="text"]', 'Il Keun Lee')
    await page.click('button[type="submit"]')

    // Wait for dashboard
    await expect(page).toHaveURL('http://localhost:5173/dashboard')

    // Verify all key metrics are displayed
    await expect(page.locator('text=임대 가능 유닛')).toBeVisible()
    await expect(page.locator('text=12/12')).toBeVisible() // All units occupied

    await expect(page.locator('text=현재 임차인')).toBeVisible()
    await expect(page.locator('text=12명')).toBeVisible()

    await expect(page.locator('text=월 수익')).toBeVisible()
    await expect(page.locator('text=₩27,333,581')).toBeVisible()
  })

  test('Invoice generation calculates amounts correctly', async ({ page }) => {
    // Login and navigate to invoice generation
    await page.goto('http://localhost:5173/login')
    await page.fill('input[type="text"]', 'Il Keun Lee')
    await page.click('button[type="submit"]')

    await page.click('text=청구서 생성')

    // Generate invoice for just one tenant to verify calculation
    // Uncheck all except 서울브레인신경과 (301)
    const checkboxes = await page.locator('input[type="checkbox"]').all()
    for (let i = 0; i < checkboxes.length; i++) {
      await checkboxes[i].uncheck()
    }

    // Check only 서울브레인신경과
    await page.locator('text=서울브레인신경과').locator('..').locator('input[type="checkbox"]').check()

    await page.click('button:has-text("청구서 생성")')

    // Should show 1 invoice generated
    await expect(page.locator('text=1개의 청구서가 생성되었습니다')).toBeVisible()

    // Verify the amount shown
    // From Excel: Rent 3,500,000 + Electricity 144,692 + Water 29,159 + VAT = 4,023,851
    await expect(page.locator('text=₩4,023,851')).toBeVisible()
  })

  test('Responsive design works on mobile', async ({ page }) => {
    // Set mobile viewport
    await page.setViewportSize({ width: 375, height: 667 })

    // Login
    await page.goto('http://localhost:5173/login')
    await page.fill('input[type="text"]', 'Il Keun Lee')
    await page.click('button[type="submit"]')

    // Dashboard should be responsive
    await expect(page.locator('h1')).toContainText('대시보드')
    await expect(page.locator('.grid')).toHaveCSS('grid-template-columns', '1fr')

    // Navigate to invoice generation
    await page.click('text=청구서 생성')

    // Should still be functional on mobile
    await expect(page.locator('h1')).toContainText('월별 청구서 생성')
    await expect(page.locator('select')).toBeVisible()
  })
})
</file>

<file path="docs/tests/test-readme.md">
# E2E Testing Guide

## Overview
This directory contains end-to-end tests for the Leasy invoice generator application using Playwright.

## Test Structure

```
tests/
├── e2e/                    # E2E test specifications
│   ├── auth.spec.ts       # Authentication flow tests
│   ├── dashboard.spec.ts  # Dashboard functionality tests
│   ├── invoice-generation.spec.ts  # Invoice creation tests
│   ├── full-journey.spec.ts      # Complete user journey tests
│   └── smoke.spec.ts      # Basic smoke tests
├── pages/                 # Page Object Model classes
│   ├── base.page.ts      # Base page class with common methods
│   ├── login.page.ts     # Login page interactions
│   ├── dashboard.page.ts # Dashboard page interactions
│   └── invoice-form.page.ts # Invoice form interactions
└── fixtures/             # Test data and utilities
    └── data/
        └── test-data.ts  # Centralized test data

```

## Running Tests

### Prerequisites
```bash
# Install Playwright browsers (one-time setup)
npx playwright install

# Install system dependencies (if needed)
npx playwright install-deps
```

### Run all tests
```bash
npm run test:e2e
```

### Run specific test file
```bash
npm run test:e2e tests/e2e/auth.spec.ts
```

### Run tests in UI mode
```bash
npm run test:e2e:ui
```

### Run tests with specific browser
```bash
npm run test:e2e -- --project=chromium
```

## Writing Tests

### Page Object Model
We use the Page Object Model pattern for maintainable tests:

```typescript
// pages/example.page.ts
export class ExamplePage extends BasePage {
  private readonly submitButton: Locator
  
  constructor(page: Page) {
    super(page)
    this.submitButton = page.getByRole('button', { name: 'Submit' })
  }
  
  async clickSubmit() {
    await this.clickElement(this.submitButton)
  }
}
```

### Test Structure
```typescript
test.describe('Feature Name', () => {
  test.beforeEach(async ({ page }) => {
    // Setup before each test
  })
  
  test('should do something', async ({ page }) => {
    // Arrange
    const loginPage = new LoginPage(page)
    
    // Act
    await loginPage.goto()
    await loginPage.login()
    
    // Assert
    await expect(page).toHaveURL('/dashboard')
  })
})
```

## Test Data

Test data is centralized in `fixtures/data/test-data.ts`:
- Mock users
- Sample buildings
- Sample tenants
- Sample invoices

## Authentication

The application uses a mock authentication system for testing:
- Mock Google OAuth flow
- Session-based authentication
- Automatic login helper in page objects

## Best Practices

1. **Use Page Objects**: Encapsulate page interactions
2. **Descriptive Names**: Use clear, descriptive test names
3. **Independent Tests**: Each test should be independent
4. **Wait Strategies**: Use Playwright's auto-waiting
5. **Assertions**: Use explicit assertions
6. **Screenshots**: Take screenshots on failure

## Debugging

### View test report
```bash
npx playwright show-report
```

### Debug specific test
```bash
npm run test:e2e -- --debug tests/e2e/auth.spec.ts
```

### Use VS Code extension
Install the Playwright Test for VS Code extension for better debugging experience.

## CI/CD Integration

Tests are configured to run in CI with:
- Parallel execution disabled in CI
- Retries on failure
- HTML report generation

## Common Issues

### Browser not installed
```bash
npx playwright install chromium
```

### Port already in use
The dev server runs on port 5173. Make sure it's not already running.

### Flaky tests
- Use proper wait strategies
- Avoid hard-coded timeouts
- Check for race conditions

## Future Improvements

- [ ] Add visual regression tests
- [ ] Implement API mocking with MSW
- [ ] Add performance testing
- [ ] Create more test fixtures
- [ ] Add accessibility tests
</file>

<file path="docs/tests/test-scenarios.md">
# Test Scenarios for Leasy MVP

Following Canon TDD approach - listing all test scenarios before implementation.

## 1. Mock Authentication Tests

- [x] POST /api/auth/mock-login accepts "Il Keun Lee" and returns success
- [x] Mock login creates a session token
- [x] Invalid/empty name returns 400 error
- [x] Session persists across requests
- [x] Logout clears session

## 2. Dashboard API Tests

- [x] GET /api/dashboard returns building data for logged-in user
- [x] Dashboard shows PNL building information
- [x] Dashboard calculates total monthly revenue correctly (₩27,333,581)
- [x] Dashboard shows correct tenant count (12 occupied units)
- [x] Unauthorized request returns 401 error

## 3. Tenant Data Tests

- [x] GET /api/tenants returns all PNL building tenants
- [x] Each tenant has correct unit number, name, and business number
- [x] Tenant data matches Excel sheet values exactly
- [x] Rent amounts are accurate for each unit
- [x] VAT is calculated as 10% of rent

## 4. Invoice Generation Tests

- [x] POST /api/invoices/generate accepts period and tenant list
- [x] Generated invoice contains all required fields
- [x] Invoice calculates rent + electricity + water correctly
- [x] VAT is properly calculated for each line item
- [x] Total amount matches sum of all items plus VAT
- [x] Invoice ID is generated uniquely
- [x] Multiple invoices can be generated in one request

## 5. PDF Generation Tests

- [x] GET /api/invoices/{id}/pdf returns PDF file
- [x] PDF contains all invoice data
- [x] PDF is properly formatted (mock)
- [x] Non-existent invoice ID returns 404

## 6. E2E User Flow Tests

- [ ] User can complete full flow: login → dashboard → generate → download
- [ ] Form validation shows appropriate error messages
- [ ] Loading states display during async operations
- [ ] Success messages show after invoice generation
- [ ] Navigation between pages works correctly

## 7. Data Validation Tests

- [ ] Excel data parser handles Korean characters correctly
- [ ] Number formatting handles Korean won currency
- [ ] Date formatting is consistent
- [ ] Missing data fields are handled gracefully

## 8. UI Component Tests

- [ ] Login form submits on enter key
- [ ] Dashboard cards display correct metrics
- [ ] Tenant selection checkboxes work properly
- [ ] Generate button is disabled when no tenants selected
- [ ] Download links work for generated PDFs

## 9. Mock Service Worker Tests

- [ ] MSW intercepts all API calls correctly
- [ ] Mock responses match expected data structure
- [ ] Network errors are simulated properly
- [ ] Loading states work with delayed responses

## 10. Form Validation Tests

- [ ] Period selector validates date format
- [ ] At least one tenant must be selected
- [ ] Form shows validation errors inline
- [ ] Submit is prevented with invalid data

## 11. State Management Tests

- [ ] User session state persists
- [ ] Generated invoices are stored in session
- [ ] Navigation maintains application state
- [ ] Refresh doesn't lose generated invoices

## 12. Error Handling Tests

- [ ] API errors show user-friendly messages
- [ ] Network failures are handled gracefully
- [ ] Invalid data doesn't crash the app
- [ ] Retry mechanisms work for failed requests

## 13. Performance Tests

- [ ] Page loads within 3 seconds
- [ ] Invoice generation completes within 5 seconds
- [ ] PDF generation completes within 10 seconds
- [ ] Large tenant lists render efficiently

## 14. Accessibility Tests

- [ ] All interactive elements are keyboard accessible
- [ ] ARIA labels are present and correct
- [ ] Color contrast meets WCAG standards
- [ ] Screen reader announces important updates

## 15. Responsive Design Tests

- [ ] Layout works on mobile devices
- [ ] Tables are scrollable on small screens
- [ ] Forms are usable on touch devices
- [ ] PDF download works on mobile
</file>

<file path="docs/TODO.md">
# TODOs

* <https://github.com/heynickc/awesome-ddd>
* <https://github.com/mehdihadeli/awesome-software-architecture>
* <https://github.com/sujeet-agrahari/awesome-database-design>
</file>

<file path="tests/e2e/TEST_CASES.md">
# Test cases

- GET / returns 200 OK "Hello world Hank"
- GET /health returns "200 OK"
</file>

<file path="apps/server/package.json">
{
  "name": "@leasy/server",
  "version": "1.0.0",
  "type": "module",
  "private": true,
  "scripts": {
    "dev": "bun run --watch src/index.ts --port 3000",
    "build": "tsc"
  },
  "dependencies": {
    "hono": "^4.8.10",
    "zod": "^3.24.1"
  },
  "devDependencies": {
    "@cloudflare/workers-types": "^4.20250109.0",
    "@typescript-eslint/eslint-plugin": "^8.20.0",
    "@typescript-eslint/parser": "^8.20.0",
    "eslint": "^9.18.0",
    "wrangler": "^4.17.0"
  }
}
</file>

<file path="apps/server/src/index.ts">
import { Hono } from 'hono'

const app = new Hono()

// Health check
app.get('/', (c) => {
  return c.text('Hello World Hank')
})

export default app
</file>

<file path="playwright.config.ts">
import { defineConfig, devices } from '@playwright/test'

export default defineConfig({
  // where to look for tests
  testDir: './tests/e2e',
  // run tests in parallel
  fullyParallel: true,
  // no retries on failed tests
  retries: 0,
  // limit the number of workers
  workers: 1,
  // reporter to use
  reporter: 'html',

  testIgnore: ['docs/**/*'],

  use: {
    // base URL to use in actions like `await page.goto('/')`
    baseURL: 'http://localhost:3000',
    trace: 'on-first-retry',
  },

  projects: [
    {
      name: 'chromium',
      use: { ...devices['Desktop Chrome'] },
    },
  ],

  // launch a web server during the tests
  webServer: [
    {
      command: 'bun run --filter @leasy/server dev',
      port: 3000,
      reuseExistingServer: true,
    },
  ],
})
</file>

<file path="README.md">
# Leasy - Invoice Generator

A modern invoice generator web app for commercial building owners managing multiple tenants.

```txt
npm install
npm run dev
```

```txt
npm run deploy
```

[For generating/synchronizing types based on your Worker configuration run](https://developers.cloudflare.com/workers/wrangler/commands/#types):

```txt
npm run cf-typegen
```

Pass the `CloudflareBindings` as generics when instantiation `Hono`:

```ts
// src/index.ts
const app = new Hono<{ Bindings: CloudflareBindings }>()
```

## Features

✅ **Dashboard** - View building metrics and tenant data
✅ **Invoice Generation** - Create invoices for tenants
✅ **Modern UI** - Clean interface with Tailwind CSS
⬜ **Real Authentication** - Currently mock login only
⬜ **Real PDF Export** - Currently mock PDF only
⬜ **Multi-building** - Currently single building only

MVP includes mock auth and single building support.

## Tech Stack

| Category | Technology | Purpose | Documentation |
|----------|------------|---------|---------------|
| **Frontend** | [TypeScript](https://www.typescriptlang.org/docs/) | Type safety & development experience | [Official Docs](https://www.typescriptlang.org/docs/) |
| | [React 19](https://react.dev/) | UI framework | [Official Docs](https://react.dev/) |
| | [TanStack Query](https://tanstack.com/query/latest) | Data fetching & state management | [Official Docs](https://tanstack.com/query/latest) |
| | [shadcn/ui](https://ui.shadcn.com/) | Component library | [Official Docs](https://ui.shadcn.com/) |
| | [Tailwind CSS](https://tailwindcss.com/) | Utility-first CSS framework | [Official Docs](https://tailwindcss.com/) |
| **Backend** | [Hono.js](https://hono.dev/docs/) | Web framework | [Official Docs](https://hono.dev/docs/) |
| | [Cloudflare Workers](https://developers.cloudflare.com/workers/) | Serverless runtime | [Official Docs](https://developers.cloudflare.com/workers/) |
| **Database** | [PostgreSQL](https://www.postgresql.org/docs/) | Primary database | [Official Docs](https://www.postgresql.org/docs/) |
| | [node-postgres](https://node-postgres.com/) | PostgreSQL client | [Official Docs](https://node-postgres.com/) |
| **Auth** | [Google OAuth](https://developers.google.com/identity/protocols/oauth2/web-server) | Authentication (ready) | [Official Docs](https://developers.google.com/identity/protocols/oauth2/web-server) |
| **Testing** | [Vitest](https://vitest.dev/) | Unit & integration testing | [Official Docs](https://vitest.dev/) |
| | [Playwright](https://playwright.dev/) | End-to-end testing | [Official Docs](https://playwright.dev/) |
| **Runtime** | [Bun](https://bun.sh/docs/) | JavaScript runtime & package manager | [Official Docs](https://bun.sh/docs/) |
| | [tsx](https://tsx.is) | TypeScript execution for Node.js | [Official Docs](https://tsx.is) |
| **Infrastructure** | [Pulumi](https://www.pulumi.com/docs/) | Infrastructure as Code | [Official Docs](https://www.pulumi.com/docs/) |
| **Development** | Mock Authentication | Development authentication | - |
| | Mock PDF Generation | Development PDF placeholder | - |

## System Architecture

```mermaid
C4Context
    title System Context Diagram for Leasy - Property Management Platform

    Person(tenants, "Tenants", "Property tenants who need to pay rent and access services")
    Person(landlords, "Landlords/Property Managers", "Property owners and managers who collect rent and manage properties")
    Person(admins, "System Administrators", "Platform administrators who manage the system")

    System(leasy, "Leasy Platform", "Property management and rent collection platform")

    System_Ext(googleAuth, "Google OAuth", "Authentication service")
    System_Ext(pdfService, "PDF Service", "Invoice and document generation")
    System_Ext(emailService, "Email Service", "Notification and communication service")
    System_Ext(paymentGateway, "Payment Gateway", "Payment processing service")
    System_Ext(cloudflare, "Cloudflare", "CDN, security, and edge computing")

    Rel(tenants, leasy, "Views properties, pays rent, downloads invoices")
    Rel(landlords, leasy, "Manages properties, views analytics, generates reports")
    Rel(admins, leasy, "Administers platform, manages users, system configuration")

    Rel(leasy, googleAuth, "Authenticates users")
    Rel(leasy, pdfService, "Generates invoices and reports")
    Rel(leasy, emailService, "Sends notifications")
    Rel(leasy, paymentGateway, "Processes payments")
    Rel(leasy, cloudflare, "Hosts application, provides security")

    UpdateLayoutConfig($c4ShapeInRow="3", $c4BoundaryInRow="2")
```

```mermaid
C4Context
title System Context diagram for Property Management App

  Person(propertyOwner, "Property Owner", "Manages their properties, leases, and payments.")

  System(spa, "Web Application", "React + Vite Single Page Application providing the user interface.")
  System(api, "Hono API", "Cloudflare Worker providing a RESTful API for the web application.")

  System_Ext(db, "Postgres Database", "Stores all property, tenant, lease, and payment information. (AWS RDS)")
  System_Ext(storage, "S3 Bucket", "Stores uploaded files like receipts and lease agreements.")
  System_Ext(monitoring, "Grafana / OTEL", "Collects and displays metrics and logs for observability.")

  Rel(propertyOwner, spa, "Uses", "HTTPS")
  Rel(spa, api, "Makes API calls to", "JSON/HTTPS")
  Rel(api, db, "Reads from and writes to")
  Rel(api, storage, "Uploads and retrieves files from")
  Rel(api, monitoring, "Sends telemetry data to")
```

### Development

```bash
# Start the development server
npm run dev

# Run tests
npm run test:e2e      # E2E tests with Playwright
npm run test:e2e:ui   # E2E tests with UI mode

# Type checking
npm run typecheck

# Build for production
npm run build
```

## Project Structure

```plaintext
src/
├── client/           # React frontend
│   ├── components/   # UI components
│   ├── pages/        # Page components
│   ├── hooks/        # Custom React hooks
│   ├── lib/          # Utilities
│   └── mocks/        # MSW handlers for development
├── server/           # Hono backend
│   ├── api/          # API endpoints
│   ├── db/           # In-memory database
│   ├── middleware/   # Auth middleware
│   ├── routes/       # Route handlers
│   └── services/     # Business logic
└── style.css         # Global styles
```

## API Endpoints

### Authentication

- `POST /api/auth/mock-login` - Mock login (accepts "Il Keun Lee")
- `POST /api/auth/logout` - Logout current session

### Dashboard & Data

- `GET /api/dashboard` - Get building overview and metrics
- `GET /api/tenants` - List all tenants with billing info

### Invoice Management

- `POST /api/invoices/generate` - Generate invoices for selected tenants
- `GET /api/invoices/:id/pdf` - Download invoice PDF (mock)

## License

MIT

## Architecture

# Design Decisions Document

## Overview

This document captures key design decisions made during the implementation of the Leasy invoice generator application and its E2E testing infrastructure.

## Architecture Decisions

### 1. Technology Stack

**Decision**: Hono + Vite + React on Cloudflare Workers

**Rationale**:

- **Hono**: Lightweight, fast web framework optimized for edge computing
- **Vite**: Modern build tool with excellent DX and HMR support
- **React 19**: Latest features including improved SSR and hooks
- **Cloudflare Workers**: Edge-first deployment with global distribution

**Trade-offs**:

- Limited Node.js compatibility (e.g., PDF generation libraries)
- Smaller ecosystem compared to traditional Node.js

### 2. Authentication Strategy

**Decision**: Simplified session-based auth with mock Google OAuth

**Rationale**:

- Quick MVP implementation
- Easy to replace with real OAuth providers
- Session cookies work well with SSR

**Assumptions**:

- Production will use proper OAuth implementation
- Sessions are acceptable (vs JWT tokens)

### 3. Data Persistence

**Decision**: In-memory storage for MVP

**Rationale**:

- Zero infrastructure requirements
- Fast development iteration
- Easy to replace with real database

**Implementation**:

```typescript
// Simple Map-based storage
const sessions = new Map<string, any>()
```

## UI/UX Decisions

### 1. Component Library

**Decision**: shadcn/ui components with Radix UI primitives

**Rationale**:

- Full control over styling
- Accessibility built-in
- Modern, clean aesthetic
- Copy-paste flexibility

**Trade-offs**:

- More initial setup vs pre-built libraries
- Need to maintain component code

### 2. Form Handling

**Decision**: Controlled components with React state

**Rationale**:

- Simple for MVP
- Real-time calculations
- Easy validation

**Future Considerations**:

- Could integrate React Hook Form for complex forms
- TanStack Form for type-safe forms

## Testing Decisions

### 1. E2E Testing Framework

**Decision**: Playwright with TypeScript

**Rationale**:

- Modern, reliable cross-browser testing
- Excellent debugging tools (trace viewer)
- Strong TypeScript support
- Auto-waiting and retry mechanisms

### 2. Test Structure

**Decision**: Page Object Model (POM) pattern

**Rationale**:

- Separates test logic from UI interactions
- Improves maintainability
- Enables reusability
- Industry best practice

**Structure**:

```
tests/
├── pages/          # Page objects
├── fixtures/       # Test data & mocks
├── e2e/           # Test specs
└── setup/         # Configuration
```

### 3. API Mocking Strategy

**Decision**: Mock Service Worker (MSW) for API mocking

**Rationale**:

- Network-level interception
- Same mocks for dev and test
- No application code changes
- Realistic testing conditions

**Implementation Notes**:

- Due to Playwright limitations, using built-in mock auth
- MSW prepared for future integration

### 4. Test Data Management

**Decision**: Centralized test data with TypeScript

**Rationale**:

- Type safety
- Single source of truth
- Easy to maintain
- Consistent across tests

## Code Organization

### 1. Shared Types

**Decision**: Shared types directory for client/server

**Rationale**:

- DRY principle
- Type safety across boundaries
- Zod schemas for runtime validation

### 2. Minimal Abstractions

**Decision**: Start simple, refactor when needed

**Rationale**:

- Avoid over-engineering
- Clear, readable code
- Easy onboarding

## Performance Considerations

### 1. PDF Generation

**Decision**: Placeholder implementation for MVP

**Rationale**:

- React PDF incompatible with Workers
- Allows progress on other features
- Can implement server-side solution later

**Future Options**:

- Separate PDF service
- Server-side rendering
- Third-party PDF API

### 2. State Management

**Decision**: React Query for server state

**Rationale**:

- Built-in caching
- Optimistic updates
- Background refetching
- Minimal boilerplate

## Security Considerations

### 1. Authentication

**Assumptions**:

- HTTPS only in production
- HttpOnly cookies for sessions
- CSRF protection needed
- Rate limiting required

### 2. Input Validation

**Decision**: Zod schemas on client and server

**Rationale**:

- Runtime type checking
- Consistent validation
- Good error messages

## Future Enhancements

### Priority 1

- Real Google OAuth integration
- Persistent database (PostgreSQL/D1)
- PDF generation service
- Email notifications

### Priority 2

- Multi-tenancy support
- Advanced reporting
- Bulk operations
- Mobile app

### Priority 3

- Webhooks/integrations
- Advanced permissions
- Audit logging
- Internationalization

## Lessons Learned

1. **Edge constraints**: Not all Node.js libraries work in Workers
2. **Type safety**: Zod + TypeScript provides excellent DX
3. **Component architecture**: shadcn/ui approach scales well
4. **Testing complexity**: Browser automation requires setup
5. **Mock data**: Centralized test data improves maintainability

## Decision Log

| Date | Decision | Rationale | Impact |
|------|----------|-----------|--------|
| 2024-01 | Use Hono framework | Edge-optimized | High |
| 2024-01 | shadcn/ui components | Flexibility | Medium |
| 2024-01 | In-memory storage | MVP speed | High |
| 2024-01 | Playwright testing | Modern E2E | High |
| 2024-01 | Mock auth for MVP | Development speed | Medium |

---

This document should be updated as new significant decisions are made.

## MVP impl

# Leasy Invoice Generator MVP - Implementation Summary

## Overview

This is a bare-bones MVP implementation of the Leasy invoice generation system following Test-Driven Development (TDD) principles as described in Canon TDD.

## Implemented Features

### 1. Mock Authentication System

- **Endpoint**: `POST /api/auth/mock-login`
- **Implementation**: Simple session-based auth with in-memory storage
- **Test Coverage**: 100% - All authentication scenarios tested
- **Location**: `src/server/api/auth.ts`

### 2. Dashboard API

- **Endpoint**: `GET /api/dashboard`
- **Data**: Shows PNL building data for Il Keun Lee
- **Monthly Revenue**: ₩27,333,581 (calculated from Excel data)
- **Test Coverage**: 100% - All dashboard scenarios tested
- **Location**: `src/server/api/dashboard.ts`

### 3. Tenant Data Management

- **Data Source**: Excel sheet "PNL임차인"
- **Tenants**: 12 units with real data from Excel
- **Location**: `src/server/db/pnl-data.ts`

### 4. Invoice Generation

- **Endpoint**: `POST /api/invoices/generate`
- **Features**:
  - Period selection
  - Multi-tenant selection
  - Real data from Excel sheets
- **Location**: `src/client/pages/invoice-generate.tsx`

### 5. Mock Service Worker (MSW)

- **Purpose**: Frontend API mocking for development
- **Handlers**: All API endpoints mocked
- **Location**: `src/client/mocks/`

## Technology Stack Used

- **Frontend**: React 19, TypeScript, Vite
- **Backend**: Hono.js, Cloudflare Workers
- **Testing**: Playwright (E2E)
- **Mocking**: Mock Service Worker (MSW)
- **Validation**: Zod
- **UI**: Tailwind CSS, shadcn/ui
- **State**: React Query

## Test Results

### Completed Test Scenarios

- ✅ Mock Authentication (5/5 tests passing)
- ✅ Dashboard API (5/5 tests passing)
- ✅ Tenant Data Tests (5/5 tests passing)
- ✅ Invoice Generation Tests (5/5 tests passing)
- ✅ PDF Generation Tests (included in invoice tests)

**Total: 20/20 API tests passing**

## User Flow

1. **Login**: User visits `/login` and enters "Il Keun Lee"
2. **Dashboard**: Shows PNL building overview with key metrics
3. **Invoice Generation**: Navigate to `/invoices/generate`
4. **Select & Generate**: Choose tenants and generate invoices
5. **Download**: Mock PDF download functionality

## Key Design Decisions

1. **No Real Auth**: Simplified mock authentication for MVP
2. **In-Memory Storage**: No database, data resets on deploy
3. **Static Excel Data**: Hardcoded from provided Excel sheets
4. **No PDF Generation**: Mock PDF responses only
5. **Single User**: Only Il Keun Lee can access the system

## API Endpoints

```typescript
POST   /api/auth/mock-login     // Mock login
POST   /api/auth/logout         // Logout
GET    /api/dashboard           // Building dashboard
GET    /api/tenants            // List tenants with billing
POST   /api/invoices/generate  // Generate invoices
GET    /api/invoices/:id/pdf   // Download PDF (mock)
```

## Data Accuracy

All financial data matches the Excel sheet exactly:

- Monthly rent amounts
- Electricity charges
- Water charges
- VAT calculations
- Total revenue: ₩27,333,581

## Running the Application

```bash
# Install dependencies
npm install

# Run tests
npm run test:e2e

# Start development server
npm run dev

# Access at http://localhost:5173
```

## Next Steps (Post-MVP)

1. Implement real authentication (Better Auth)
2. Add database persistence
3. Implement actual PDF generation
4. Add email notifications
5. Multi-building support
6. Payment tracking
7. Historical data

## Notes

- This MVP demonstrates the core value proposition
- All test scenarios were defined upfront (Canon TDD)
- Implementation is minimal but functional
- Ready for user testing and feedback
</file>

<file path=".gitignore">
# Production build output
dist/
dist-server/

# Development environment
.yarn/
!.yarn/releases
.vscode/*
!.vscode/launch.json
!.vscode/*.code-snippets
.idea/workspace.xml
.idea/usage.statistics.xml
.idea/shelf

# Dependencies
node_modules/
.wrangler

# Environment variables
.env
.env.production
.dev.vars

# Logs
logs/
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

# Miscellaneous
.DS_Store
playwright-report
test-results
</file>

<file path="CLAUDE.md">
# CLAUDE.md

This file provides guidance to Claude Code (claude.ai/code) when working with code in this repository.

## Project Overview
Leasy is a modern web application built with Hono (server) and React + Vite (client), deployed on Cloudflare Workers. The project is structured as a monorepo with separate client and server packages.

## Development Commands
```bash
# Development
bun run dev         # Start both client (port 5173) and server (port 8787)
bun run preview     # Preview production build

# Build & Deploy  
bun run build       # Build all packages for production
bun run deploy      # Deploy server to Cloudflare Workers

# Testing
bun run test        # Run all tests (unit and E2E)
bun run test:e2e    # Run E2E tests with Playwright
bun run test:e2e:ui # Run E2E tests with UI interface
bun run test:e2e:headed # Run E2E tests in headed mode

# Type Checking & Linting
bun run typecheck   # TypeScript type checking for all packages
bun run lint        # Lint all packages
bun run lint:fix    # Fix linting issues in all packages

# Package-specific commands
bun run --filter @leasy/client dev    # Run only client
bun run --filter @leasy/server dev    # Run only server
bun run --filter @leasy/server cf-typegen  # Generate Cloudflare Workers types
```

### Testing Individual Files
```bash
# Run specific test file
bun run test:e2e -- tests/e2e/auth.spec.ts

# Run tests in UI mode for debugging  
bun run test:e2e:ui

# Run specific unit test
bun run test:unit -- src/hooks/useApi.test.ts
```

## Architecture
### Monorepo Structure
- **Root**: Orchestrates the monorepo with Bun workspace configuration
- **packages/client/**: React frontend application
  - Built with Vite
  - React 19 with TypeScript
  - TanStack Query for data fetching
  - Tailwind CSS for styling
- **packages/server/**: Hono backend on Cloudflare Workers  
  - Lightweight edge-optimized framework
  - REST API endpoints
  - TypeScript with Cloudflare Workers types

### Key Architectural Decisions
1. **Edge-First**: Deployed on Cloudflare Workers for global distribution
2. **Type Safety**: Full TypeScript with strict mode enabled
3. **Monorepo**: Simplified dependency management with Bun workspaces
4. **Testing**: Comprehensive E2E tests with Playwright

### Path Configuration
- Use `@/` alias for imports (maps to src/ directory)
- Example: `import { useApi } from '@/hooks/useApi'`

## Testing Strategy
- **E2E Tests**: Playwright tests in `tests/e2e/` directory
  - Test server runs on port 5173 (same as dev)
  - Tests cover user flows and API endpoints
  - Use `npm run test:e2e:ui` for interactive debugging
- **Unit Tests**: Vitest for component and utility testing
  - Client tests with React Testing Library
  - Server tests for API endpoints

## Development Workflow (TDD Approach)
1. Write failing E2E test: `bun run test:e2e -- tests/e2e/feature.spec.ts`
2. Start dev servers: `bun run dev`
3. Implement feature until test passes
4. Refactor while keeping tests green
5. Check types: `bun run typecheck`
6. Fix linting: `bun run lint:fix`
7. Build: `bun run build`
8. Deploy: `bun run deploy`

## Current State
The project appears to be transitioning from a complex invoice management system to a simpler template. The existing E2E test infrastructure references features (authentication, dashboard, invoices) that may need to be updated or removed based on the new simplified architecture.
</file>

<file path="tsconfig.json">
{
  "compilerOptions": {
    "target": "ESNext",
    "module": "ESNext",
    "moduleResolution": "Bundler",
    "strict": true,
    "skipLibCheck": true,
    "esModuleInterop": true,
    "allowSyntheticDefaultImports": true,
    "forceConsistentCasingInFileNames": true,
    "resolveJsonModule": true,
    "isolatedModules": true,
    "noEmit": true,
    "lib": ["ESNext"],
    "types": ["node"]
  },
  "exclude": ["node_modules", "dist", "build"]
}
</file>

<file path=".claude/settings.local.json">
{
  "permissions": {
    "allow": [
      "Bash(mkdir:*)",
      "Bash(npm install)",
      "Bash(npm view:*)",
      "Bash(npm search:*)",
      "Bash(npm run dev:*)",
      "Bash(curl:*)",
      "Bash(kill:*)",
      "Bash(rm:*)",
      "Bash(npm install:*)",
      "Bash(npm run test:e2e:*)",
      "Bash(npx:*)",
      "Bash(pkill:*)",
      "Bash(true)",
      "Bash(find:*)",
      "Bash(ls:*)",
      "Bash(npm run typecheck:*)",
      "Bash(npm run test:*)",
      "Bash(npm run build:*)",
      "Bash(grep:*)",
      "Bash(timeout 10 npm run dev)",
      "Bash(node:*)",
      "Bash(cat:*)",
      "Bash(npm run:*)",
      "Bash(bun install:*)",
      "Bash(bunx playwright:*)",
      "Bash(bun run test:e2e:*)",
      "Bash(mv:*)"
    ],
    "deny": []
  }
}
</file>

<file path="package.json">
{
  "name": "leasy",
  "type": "module",
  "private": true,
  "workspaces": [
    "apps/*"
  ],
  "scripts": {
    "dev": "bun run --filter @leasy/server dev"
  },
  "devDependencies": {
    "@playwright/test": "^1.48.2",
    "@types/node": "^22.10.5",
    "typescript": "^5.7.3",
    "vitest": "^2.1.8",
    "@types/bun": "latest"
  },
  "dependencies": {
    "playwright": "^1.54.2"
  }
}
</file>

</files>
