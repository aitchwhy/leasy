This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

</file_summary>

<directory_structure>
.claude/
  settings.local.json
src/
  client/
    components/
      ui/
        badge.tsx
        button.tsx
        card.tsx
        checkbox.tsx
        input.tsx
        label.tsx
        popover.tsx
        select.tsx
        sonner.tsx
        table.tsx
      layout.tsx
    hooks/
      useApi.ts
    lib/
      utils.ts
    mocks/
      browser.ts
      handlers.ts
    pages/
      dashboard.tsx
      invoice-form.tsx
      invoice-generate.tsx
      login.tsx
      mvp-dashboard.tsx
    app.tsx
    index.tsx
  server/
    api/
      auth.ts
      dashboard.ts
      invoices.ts
      tenants.ts
    db/
      pnl-data.ts
      store.ts
    api.ts
    index.tsx
    renderer.tsx
  shared/
    types.ts
  style.css
tests/
  e2e/
    api.spec.ts
    auth.spec.ts
    dashboard.spec.ts
    invoices.spec.ts
    smoke.spec.ts
    tenants.spec.ts
    ui.spec.ts
    user-flow.spec.ts
  README.md
  test-scenarios.md
.gitignore
CLAUDE.md
DESIGN_DECISIONS.md
MVP_IMPLEMENTATION_SUMMARY.md
package.json
playwright.config.ts
postcss.config.js
README.md
tailwind.config.ts
tsconfig.json
vite.config.ts
wrangler.jsonc
wrangler.toml
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="src/client/components/ui/checkbox.tsx">
import * as CheckboxPrimitive from "@radix-ui/react-checkbox"
import { Check } from "lucide-react"
import * as React from "react"

import { cn } from "@/client/lib/utils"

const Checkbox = React.forwardRef<
  React.ElementRef<typeof CheckboxPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>
>(({ className, ...props }, ref) => (
  <CheckboxPrimitive.Root
    ref={ref}
    className={cn(
      "peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground",
      className
    )}
    {...props}
  >
    <CheckboxPrimitive.Indicator
      className={cn("flex items-center justify-center text-current")}
    >
      <Check className="h-4 w-4" />
    </CheckboxPrimitive.Indicator>
  </CheckboxPrimitive.Root>
))
Checkbox.displayName = CheckboxPrimitive.Root.displayName

export { Checkbox }
</file>

<file path="src/client/components/ui/label.tsx">
import * as React from 'react'
import * as LabelPrimitive from '@radix-ui/react-label'
import { cva, type VariantProps } from 'class-variance-authority'
import { cn } from '@/client/lib/utils'

const labelVariants = cva(
  'text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70'
)

const Label = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &
    VariantProps<typeof labelVariants>
>(({ className, ...props }, ref) => (
  <LabelPrimitive.Root
    ref={ref}
    className={cn(labelVariants(), className)}
    {...props}
  />
))
Label.displayName = LabelPrimitive.Root.displayName

export { Label }
</file>

<file path="src/client/components/ui/popover.tsx">
import * as React from 'react'
import * as PopoverPrimitive from '@radix-ui/react-popover'
import { cn } from '@/client/lib/utils'

const Popover = PopoverPrimitive.Root

const PopoverTrigger = PopoverPrimitive.Trigger

const PopoverAnchor = PopoverPrimitive.Anchor

const PopoverContent = React.forwardRef<
  React.ElementRef<typeof PopoverPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>
>(({ className, align = 'center', sideOffset = 4, ...props }, ref) => (
  <PopoverPrimitive.Portal>
    <PopoverPrimitive.Content
      ref={ref}
      align={align}
      sideOffset={sideOffset}
      className={cn(
        'z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2',
        className
      )}
      {...props}
    />
  </PopoverPrimitive.Portal>
))
PopoverContent.displayName = PopoverPrimitive.Content.displayName

export { Popover, PopoverTrigger, PopoverContent, PopoverAnchor }
</file>

<file path="src/client/hooks/useApi.ts">
import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query'
import { toast } from 'sonner'
import type { 
  Building, 
  Lease, 
  Invoice, 
  CreateInvoiceRequest,
  CreateInvoiceResponse 
} from '@/shared/types'

// Base API URL - in production this would come from environment variable
const API_BASE = '/api'

// Fetch helpers
async function fetchJson<T>(url: string): Promise<T> {
  const response = await fetch(url)
  if (!response.ok) {
    const errorData = await response.json().catch(() => ({ error: 'Request failed' })) as { error?: string }
    throw new Error(errorData.error || `HTTP ${response.status}`)
  }
  return response.json()
}

async function postJson<TRequest, TResponse>(
  url: string, 
  data: TRequest
): Promise<TResponse> {
  const response = await fetch(url, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify(data),
  })
  
  if (!response.ok) {
    const errorData = await response.json().catch(() => ({ error: 'Request failed' })) as { error?: string }
    throw new Error(errorData.error || `HTTP ${response.status}`)
  }
  
  return response.json()
}

// Buildings hook
export function useBuildings() {
  return useQuery({
    queryKey: ['buildings'],
    queryFn: () => fetchJson<Building[]>(`${API_BASE}/buildings`),
    staleTime: 5 * 60 * 1000, // 5 minutes
  })
}

// Leases hook
export function useLeases(buildingId: string | null) {
  return useQuery({
    queryKey: ['leases', buildingId],
    queryFn: () => 
      buildingId 
        ? fetchJson<Lease[]>(`${API_BASE}/leases?building_id=${buildingId}`)
        : Promise.resolve([]),
    enabled: !!buildingId,
  })
}

// Single invoice hook
export function useInvoice(invoiceId: string | null) {
  return useQuery({
    queryKey: ['invoice', invoiceId],
    queryFn: () => 
      invoiceId 
        ? fetchJson<Invoice>(`${API_BASE}/invoices/${invoiceId}`)
        : Promise.resolve(null),
    enabled: !!invoiceId,
  })
}

// All invoices hook
export function useInvoices() {
  return useQuery({
    queryKey: ['invoices'],
    queryFn: async () => {
      // Since we don't have a GET /invoices endpoint, we'll use the store data
      // In a real app, this would be a proper API call
      const response = await fetch(`${API_BASE}/buildings`)
      if (response.ok) {
        // For now, return empty array as we don't have a list endpoint
        return [] as Invoice[]
      }
      throw new Error('Failed to fetch invoices')
    },
  })
}

// Create invoice mutation
export function useCreateInvoice() {
  const queryClient = useQueryClient()
  
  return useMutation({
    mutationFn: (data: CreateInvoiceRequest) => 
      postJson<CreateInvoiceRequest, CreateInvoiceResponse>(
        `${API_BASE}/invoices`, 
        data
      ),
    onSuccess: (data) => {
      toast.success('Invoice created successfully', {
        description: `Invoice ID: ${data.invoice_id}`,
      })
      // Invalidate invoices list
      queryClient.invalidateQueries({ queryKey: ['invoices'] })
    },
    onError: (error: Error) => {
      toast.error('Failed to create invoice', {
        description: error.message,
      })
    },
  })
}
</file>

<file path="src/client/lib/utils.ts">
import { type ClassValue, clsx } from 'clsx'
import { twMerge } from 'tailwind-merge'

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}
</file>

<file path="src/client/mocks/browser.ts">
import { setupWorker } from 'msw/browser'
import { handlers } from './handlers'

export const worker = setupWorker(...handlers)
</file>

<file path="src/client/mocks/handlers.ts">
import { pnlTenantData } from '@/server/db/pnl-data';
import type {
    DashboardResponse,
    GenerateInvoicesRequest,
    GenerateInvoicesResponse,
    MockLoginRequest,
    MockLoginResponse
} from '@/shared/types';
import { http, HttpResponse } from 'msw';

// Mock session storage
const sessions = new Map<string, { user: { name: string; role: string } }>()

// Generate mock token
function generateToken(): string {
  return `mock-token-${Date.now()}-${Math.random().toString(36).substring(2)}`
}

export const handlers = [
  // Mock login
  http.post('/api/auth/mock-login', async ({ request }) => {
    const body = await request.json() as MockLoginRequest

    if (!body.name || body.name.trim() === '') {
      return HttpResponse.json(
        { error: 'Name is required' },
        { status: 400 }
      )
    }

    if (body.name !== 'Il Keun Lee') {
      return HttpResponse.json(
        { error: 'User not found' },
        { status: 404 }
      )
    }

    const token = generateToken()
    const user = { name: body.name, role: 'owner' }
    sessions.set(token, { user })

    const response: MockLoginResponse = {
      token,
      user
    }

    return HttpResponse.json(response)
  }),

  // Logout
  http.post('/api/auth/logout', async ({ request }) => {
    const authHeader = request.headers.get('Authorization')
    if (authHeader?.startsWith('Bearer ')) {
      const token = authHeader.substring(7)
      sessions.delete(token)
    }

    return HttpResponse.json({ message: 'Logged out successfully' })
  }),

  // Dashboard
  http.get('/api/dashboard', async ({ request }) => {
    const authHeader = request.headers.get('Authorization')
    if (!authHeader?.startsWith('Bearer ')) {
      return HttpResponse.json(
        { error: 'Unauthorized' },
        { status: 401 }
      )
    }

    const token = authHeader.substring(7)
    const session = sessions.get(token)

    if (!session) {
      return HttpResponse.json(
        { error: 'Unauthorized' },
        { status: 401 }
      )
    }

    const totalMonthlyRevenue = pnlTenantData.reduce((sum, tenant) =>
      sum + tenant.monthlyRent + tenant.vat, 0
    )

    const response: DashboardResponse = {
      building: {
        id: 'pnl-001',
        name: 'PNL Building',
        address: '서울특별시 강남구 논현로 159길 17',
        owner: 'Il Keun Lee',
        totalUnits: 13,
        occupiedUnits: pnlTenantData.length,
        monthlyRevenue: totalMonthlyRevenue
      },
      summary: {
        totalTenants: pnlTenantData.length,
        totalMonthlyRevenue: totalMonthlyRevenue,
        lastInvoiceGeneration: undefined
      }
    }

    return HttpResponse.json(response)
  }),

  // Get tenants
  http.get('/api/tenants', async ({ request }) => {
    const authHeader = request.headers.get('Authorization')
    if (!authHeader?.startsWith('Bearer ')) {
      return HttpResponse.json(
        { error: 'Unauthorized' },
        { status: 401 }
      )
    }

    return HttpResponse.json(pnlTenantData)
  }),

  // Generate invoices
  http.post('/api/invoices/generate', async ({ request }) => {
    const authHeader = request.headers.get('Authorization')
    if (!authHeader?.startsWith('Bearer ')) {
      return HttpResponse.json(
        { error: 'Unauthorized' },
        { status: 401 }
      )
    }

    const body = await request.json() as GenerateInvoicesRequest

    const invoices = body.tenantIds.map(tenantId => {
      const tenant = pnlTenantData.find(t => t.id === tenantId)
      if (!tenant) {
        throw new Error(`Tenant ${tenantId} not found`)
      }

      return {
        id: `inv-${Date.now()}-${Math.random().toString(36).substring(2)}`,
        tenantName: tenant.name,
        amount: tenant.totalAmount
      }
    })

    const response: GenerateInvoicesResponse = {
      invoices,
      count: invoices.length
    }

    return HttpResponse.json(response)
  }),

  // Get invoice PDF (mock)
  http.get('/api/invoices/:id/pdf', async ({ request, params }) => {
    const authHeader = request.headers.get('Authorization')
    if (!authHeader?.startsWith('Bearer ')) {
      return HttpResponse.json(
        { error: 'Unauthorized' },
        { status: 401 }
      )
    }

    // For MVP, return a mock PDF response
    return new HttpResponse(
      new Blob(['Mock PDF content'], { type: 'application/pdf' }),
      {
        headers: {
          'Content-Type': 'application/pdf',
          'Content-Disposition': `attachment; filename="invoice-${params.id}.pdf"`
        }
      }
    )
  })
]
</file>

<file path="src/client/pages/invoice-generate.tsx">
import { Layout } from '@/client/components/layout'
import { Button } from '@/client/components/ui/button'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/client/components/ui/card'
import { Checkbox } from '@/client/components/ui/checkbox'
import { Label } from '@/client/components/ui/label'
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/client/components/ui/select'
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/client/components/ui/table'
import type { GenerateInvoicesResponse, TenantBilling } from '@/shared/types'
import { Download, FileText } from 'lucide-react'
import { useEffect, useState } from 'react'
import { toast } from 'sonner'

export function InvoiceGeneratePage() {
  const [tenants, setTenants] = useState<TenantBilling[]>([])
  const [selectedTenants, setSelectedTenants] = useState<Set<string>>(new Set())
  const [period, setPeriod] = useState<string>('')
  const [isLoading, setIsLoading] = useState(true)
  const [isGenerating, setIsGenerating] = useState(false)
  const [generatedInvoices, setGeneratedInvoices] = useState<GenerateInvoicesResponse | null>(null)

  useEffect(() => {
    // Set default period to current month
    const now = new Date()
    const year = now.getFullYear()
    const month = now.getMonth() + 1
    setPeriod(`${year}년 ${month}월`)

    fetchTenants()
  }, [])

  const fetchTenants = async () => {
    try {
      const token = localStorage.getItem('auth_token')
      if (!token) {
        window.location.href = '/login'
        return
      }

      const response = await fetch('/api/tenants', {
        headers: {
          'Authorization': `Bearer ${token}`
        }
      })

      if (!response.ok) {
        if (response.status === 401) {
          localStorage.removeItem('auth_token')
          localStorage.removeItem('user')
          window.location.href = '/login'
          return
        }
        throw new Error('Failed to fetch tenants')
      }

      const data = await response.json() as TenantBilling[]
      setTenants(data)
      // Select all tenants by default
      setSelectedTenants(new Set(data.map(t => t.id)))
    } catch (error) {
      toast.error('Failed to load tenant data')
      console.error(error)
    } finally {
      setIsLoading(false)
    }
  }

  const handleSelectAll = (checked: boolean) => {
    if (checked) {
      setSelectedTenants(new Set(tenants.map(t => t.id)))
    } else {
      setSelectedTenants(new Set())
    }
  }

  const handleSelectTenant = (tenantId: string, checked: boolean) => {
    const newSelected = new Set(selectedTenants)
    if (checked) {
      newSelected.add(tenantId)
    } else {
      newSelected.delete(tenantId)
    }
    setSelectedTenants(newSelected)
  }

  const handleGenerate = async () => {
    if (selectedTenants.size === 0) {
      toast.error('Please select at least one tenant')
      return
    }

    setIsGenerating(true)
    setGeneratedInvoices(null)

    try {
      const token = localStorage.getItem('auth_token')
      const response = await fetch('/api/invoices/generate', {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          period,
          tenantIds: Array.from(selectedTenants)
        })
      })

      if (!response.ok) {
        throw new Error('Failed to generate invoices')
      }

      const data = await response.json() as GenerateInvoicesResponse
      setGeneratedInvoices(data)
      toast.success(`Successfully generated ${data.count} invoices`)
    } catch (error) {
      toast.error('Failed to generate invoices')
      console.error(error)
    } finally {
      setIsGenerating(false)
    }
  }

  const handleDownloadPdf = async (invoiceId: string) => {
    try {
      const token = localStorage.getItem('auth_token')
      const response = await fetch(`/api/invoices/${invoiceId}/pdf`, {
        headers: {
          'Authorization': `Bearer ${token}`
        }
      })

      if (!response.ok) {
        throw new Error('Failed to download PDF')
      }

      const blob = await response.blob()
      const url = window.URL.createObjectURL(blob)
      const a = document.createElement('a')
      a.href = url
      a.download = `invoice-${invoiceId}.pdf`
      document.body.appendChild(a)
      a.click()
      window.URL.revokeObjectURL(url)
      document.body.removeChild(a)
    } catch (error) {
      toast.error('Failed to download PDF')
      console.error(error)
    }
  }

  const formatCurrency = (amount: number) => {
    return new Intl.NumberFormat('ko-KR', {
      style: 'currency',
      currency: 'KRW'
    }).format(amount)
  }

  if (isLoading) {
    return (
      <Layout>
        <div className="flex items-center justify-center h-64">
          <p>Loading...</p>
        </div>
      </Layout>
    )
  }

  return (
    <Layout>
      <div className="space-y-8">
        <div>
          <h1 className="text-3xl font-bold">Generate Monthly Invoices</h1>
          <p className="text-muted-foreground">
            Select tenants and generate invoices for the specified period
          </p>
        </div>

        {/* Configuration */}
        <Card>
          <CardHeader>
            <CardTitle>Invoice Configuration</CardTitle>
            <CardDescription>Configure invoice generation settings</CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="space-y-2">
              <Label htmlFor="period">Period</Label>
              <Select value={period} onValueChange={setPeriod}>
                <SelectTrigger id="period">
                  <SelectValue placeholder="Select period" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="2025년 5월">2025년 5월</SelectItem>
                  <SelectItem value="2025년 6월">2025년 6월</SelectItem>
                  <SelectItem value="2025년 7월">2025년 7월</SelectItem>
                </SelectContent>
              </Select>
            </div>
          </CardContent>
        </Card>

        {/* Tenant Selection */}
        <Card>
          <CardHeader>
            <div className="flex items-center justify-between">
              <div>
                <CardTitle>Select Tenants</CardTitle>
                <CardDescription>Choose which tenants to generate invoices for</CardDescription>
              </div>
              <div className="flex items-center space-x-2">
                                  <Checkbox
                    id="select-all"
                    checked={selectedTenants.size === tenants.length && tenants.length > 0}
                    onCheckedChange={(checked) => handleSelectAll(checked as boolean)}
                  />
                <Label htmlFor="select-all">Select All</Label>
              </div>
            </div>
          </CardHeader>
          <CardContent>
            <Table>
              <TableHeader>
                <TableRow>
                  <TableHead className="w-12"></TableHead>
                  <TableHead>Unit</TableHead>
                  <TableHead>Tenant</TableHead>
                  <TableHead>Business Number</TableHead>
                  <TableHead className="text-right">Rent</TableHead>
                  <TableHead className="text-right">Electricity</TableHead>
                  <TableHead className="text-right">Water</TableHead>
                  <TableHead className="text-right">VAT</TableHead>
                  <TableHead className="text-right">Total</TableHead>
                </TableRow>
              </TableHeader>
              <TableBody>
                {tenants.map((tenant) => (
                  <TableRow key={tenant.id}>
                    <TableCell>
                      <Checkbox
                        checked={selectedTenants.has(tenant.id)}
                        onCheckedChange={(checked) =>
                          handleSelectTenant(tenant.id, checked as boolean)
                        }
                      />
                    </TableCell>
                    <TableCell className="font-medium">{tenant.unit}</TableCell>
                    <TableCell>{tenant.name}</TableCell>
                    <TableCell>{tenant.businessNumber}</TableCell>
                    <TableCell className="text-right">
                      {formatCurrency(tenant.monthlyRent)}
                    </TableCell>
                    <TableCell className="text-right">
                      {formatCurrency(tenant.electricityCharge)}
                    </TableCell>
                    <TableCell className="text-right">
                      {formatCurrency(tenant.waterCharge)}
                    </TableCell>
                    <TableCell className="text-right">
                      {formatCurrency(tenant.vat)}
                    </TableCell>
                    <TableCell className="text-right font-medium">
                      {formatCurrency(tenant.totalAmount)}
                    </TableCell>
                  </TableRow>
                ))}
              </TableBody>
            </Table>
          </CardContent>
        </Card>

        {/* Generate Button */}
        <div className="flex justify-end">
          <Button
            size="lg"
            onClick={handleGenerate}
            disabled={selectedTenants.size === 0 || isGenerating}
          >
            <FileText className="mr-2 h-4 w-4" />
            {isGenerating ? 'Generating...' : `Generate ${selectedTenants.size} Invoice${selectedTenants.size !== 1 ? 's' : ''}`}
          </Button>
        </div>

        {/* Generated Invoices */}
        {generatedInvoices && (
          <Card>
            <CardHeader>
              <CardTitle>Generated Invoices</CardTitle>
              <CardDescription>
                Successfully generated {generatedInvoices.count} invoices
              </CardDescription>
            </CardHeader>
            <CardContent>
              <Table>
                <TableHeader>
                  <TableRow>
                    <TableHead>Invoice ID</TableHead>
                    <TableHead>Tenant</TableHead>
                    <TableHead className="text-right">Amount</TableHead>
                    <TableHead className="text-right">Actions</TableHead>
                  </TableRow>
                </TableHeader>
                <TableBody>
                  {generatedInvoices.invoices.map((invoice) => (
                    <TableRow key={invoice.id}>
                      <TableCell className="font-mono text-sm">{invoice.id}</TableCell>
                      <TableCell>{invoice.tenantName}</TableCell>
                      <TableCell className="text-right">
                        {formatCurrency(invoice.amount)}
                      </TableCell>
                      <TableCell className="text-right">
                        <Button
                          size="sm"
                          variant="outline"
                          onClick={() => handleDownloadPdf(invoice.id)}
                        >
                          <Download className="mr-2 h-4 w-4" />
                          Download PDF
                        </Button>
                      </TableCell>
                    </TableRow>
                  ))}
                </TableBody>
              </Table>
            </CardContent>
          </Card>
        )}
      </div>
    </Layout>
  )
}
</file>

<file path="src/client/pages/mvp-dashboard.tsx">
import { Layout } from '@/client/components/layout'
import { Button } from '@/client/components/ui/button'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/client/components/ui/card'
import type { DashboardResponse } from '@/shared/types'
import { Building2, DollarSign, FileText, Users } from 'lucide-react'
import { useEffect, useState } from 'react'
import { toast } from 'sonner'

export function MVPDashboardPage() {
  const [dashboardData, setDashboardData] = useState<DashboardResponse | null>(null)
  const [isLoading, setIsLoading] = useState(true)

  useEffect(() => {
    fetchDashboardData()
  }, [])

  const fetchDashboardData = async () => {
    try {
      const token = localStorage.getItem('auth_token')
      if (!token) {
        window.location.href = '/login'
        return
      }

      const response = await fetch('/api/dashboard', {
        headers: {
          'Authorization': `Bearer ${token}`
        }
      })

      if (!response.ok) {
        if (response.status === 401) {
          localStorage.removeItem('auth_token')
          localStorage.removeItem('user')
          window.location.href = '/login'
          return
        }
        throw new Error('Failed to fetch dashboard data')
      }

      const data = await response.json() as DashboardResponse
      setDashboardData(data)
    } catch (error) {
      toast.error('Failed to load dashboard data')
      console.error(error)
    } finally {
      setIsLoading(false)
    }
  }

  const formatCurrency = (amount: number) => {
    return new Intl.NumberFormat('ko-KR', {
      style: 'currency',
      currency: 'KRW'
    }).format(amount)
  }

  if (isLoading) {
    return (
      <Layout>
        <div className="flex items-center justify-center h-64">
          <p>Loading...</p>
        </div>
      </Layout>
    )
  }

  if (!dashboardData) {
    return (
      <Layout>
        <div className="flex items-center justify-center h-64">
          <p>No data available</p>
        </div>
      </Layout>
    )
  }

  const { building, summary } = dashboardData

  return (
    <Layout>
      <div className="space-y-8">
        <div>
          <h1 className="text-3xl font-bold">{building.name} Dashboard</h1>
          <p className="text-muted-foreground">
            Owner: {building.owner} | {building.address}
          </p>
        </div>

        {/* Stats Grid */}
        <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-4">
          <Card>
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium">Total Units</CardTitle>
              <Building2 className="h-4 w-4 text-muted-foreground" />
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold">{building.totalUnits}</div>
              <p className="text-xs text-muted-foreground">
                {building.occupiedUnits} occupied
              </p>
            </CardContent>
          </Card>

          <Card>
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium">Total Tenants</CardTitle>
              <Users className="h-4 w-4 text-muted-foreground" />
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold">{summary.totalTenants}</div>
              <p className="text-xs text-muted-foreground">Active tenants</p>
            </CardContent>
          </Card>

          <Card>
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium">Monthly Revenue</CardTitle>
              <DollarSign className="h-4 w-4 text-muted-foreground" />
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold">
                {formatCurrency(summary.totalMonthlyRevenue)}
              </div>
              <p className="text-xs text-muted-foreground">Including VAT</p>
            </CardContent>
          </Card>

          <Card>
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium">Actions</CardTitle>
              <FileText className="h-4 w-4 text-muted-foreground" />
            </CardHeader>
            <CardContent>
                            <Button
                className="w-full"
                onClick={() => window.location.href = '/invoices/generate'}
              >
                Generate Invoices
              </Button>
            </CardContent>
          </Card>
        </div>

        {/* Quick Actions */}
        <Card>
          <CardHeader>
            <CardTitle>Quick Actions</CardTitle>
            <CardDescription>Manage your property and generate invoices</CardDescription>
          </CardHeader>
          <CardContent>
            <div className="flex gap-4">
                            <Button
                size="lg"
                onClick={() => window.location.href = '/invoices/generate'}
              >
                <FileText className="mr-2 h-4 w-4" />
                Generate Monthly Invoices
              </Button>
            </div>
          </CardContent>
        </Card>
      </div>
    </Layout>
  )
}
</file>

<file path="src/server/api/auth.ts">
import { MockLoginRequestSchema, type MockLoginResponse } from '@/shared/types';
import { Hono } from 'hono';

const app = new Hono()

// Simple in-memory session store
const sessions = new Map<string, { user: { name: string; role: string }; expiresAt: number }>()

// Generate simple token
function generateToken(): string {
  return `mock-token-${Date.now()}-${Math.random().toString(36).substring(2)}`
}

// Mock login endpoint
app.post('/mock-login', async (c) => {
  try {
    const body = await c.req.json()
    const parsed = MockLoginRequestSchema.safeParse(body)

    if (!parsed.success) {
      return c.json({ error: 'Invalid request', details: parsed.error.flatten() }, 400)
    }

    const { name } = parsed.data

    // For MVP, only accept "Il Keun Lee"
    if (name !== 'Il Keun Lee') {
      return c.json({ error: 'User not found' }, 404)
    }

    // Generate token and store session
    const token = generateToken()
    const user = { name, role: 'owner' }

    sessions.set(token, {
      user,
      expiresAt: Date.now() + 24 * 60 * 60 * 1000 // 24 hours
    })

    const response: MockLoginResponse = {
      token,
      user
    }

    return c.json(response)
  } catch (error) {
    return c.json({ error: 'Internal server error' }, 500)
  }
})

// Logout endpoint
app.post('/logout', async (c) => {
  const authHeader = c.req.header('Authorization')
  if (!authHeader?.startsWith('Bearer ')) {
    return c.json({ error: 'No token provided' }, 401)
  }

  const token = authHeader.substring(7)
  sessions.delete(token)

  return c.json({ message: 'Logged out successfully' })
})

// Middleware to check authentication
export function requireAuth(c: any, next: any): any {
  const authHeader = c.req.header('Authorization')
  if (!authHeader?.startsWith('Bearer ')) {
    return c.json({ error: 'Unauthorized' }, 401)
  }

  const token = authHeader.substring(7)
  const session = sessions.get(token)

  if (!session || session.expiresAt < Date.now()) {
    sessions.delete(token)
    return c.json({ error: 'Unauthorized' }, 401)
  }

  // Add user to context
  c.set('user', session.user)
  return next()
}

export default app
</file>

<file path="src/server/api/dashboard.ts">
import type { DashboardResponse } from '@/shared/types'
import { Context, Hono } from 'hono'
import { pnlTenantData } from '../db/pnl-data'
import { requireAuth } from './auth'

const app = new Hono()

// Apply authentication middleware
app.use('*', requireAuth as any)

// Dashboard endpoint - returns PNL building data for Il Keun Lee
app.get('/', (c: Context) => {
  try {
    const user = c.get('user') as { name: string; role: string }

    // For MVP, only Il Keun Lee can access
    if (user.name !== 'Il Keun Lee') {
      return c.json({ error: 'Unauthorized' }, 403)
    }

        // Calculate totals from tenant data
    const totalMonthlyRevenue = pnlTenantData.reduce((sum: number, tenant: any) =>
      sum + tenant.monthlyRent + tenant.vat, 0
    )

    const response: DashboardResponse = {
      building: {
        id: 'pnl-001',
        name: 'PNL Building',
        address: '서울특별시 강남구 논현로 159길 17',
        owner: 'Il Keun Lee',
        totalUnits: 13,
        occupiedUnits: pnlTenantData.length,
        monthlyRevenue: totalMonthlyRevenue
      },
      summary: {
        totalTenants: pnlTenantData.length,
        totalMonthlyRevenue: totalMonthlyRevenue,
        lastInvoiceGeneration: undefined // No invoices generated yet in MVP
      }
    }

    return c.json(response)
  } catch (error) {
    return c.json({ error: 'Internal server error' }, 500)
  }
})

export default app
</file>

<file path="src/server/api/invoices.ts">
import { GenerateInvoicesRequestSchema, type FullInvoice, type GenerateInvoicesResponse } from '@/shared/types'
import { Context, Hono } from 'hono'
import { pnlTenantData } from '../db/pnl-data'
import { requireAuth } from './auth'

const app = new Hono()

// Apply authentication middleware
app.use('*', requireAuth as any)

// In-memory invoice storage
const invoices = new Map<string, FullInvoice>()

// Generate unique invoice ID
function generateInvoiceId(): string {
  return `inv-${Date.now()}-${Math.random().toString(36).substring(2, 8)}`
}

// Generate invoices
app.post('/generate', async (c: Context) => {
  try {
    const user = c.get('user') as { name: string; role: string }

    // For MVP, only Il Keun Lee can access
    if (user.name !== 'Il Keun Lee') {
      return c.json({ error: 'Unauthorized' }, 403)
    }

    const body = await c.req.json()
    const parsed = GenerateInvoicesRequestSchema.safeParse(body)

    if (!parsed.success) {
      return c.json({
        error: 'Validation failed',
        details: parsed.error.flatten()
      }, 422)
    }

    const { period, tenantIds } = parsed.data
    const generatedInvoices: Array<{ id: string; tenantName: string; amount: number }> = []

    // Generate invoice for each selected tenant
    for (const tenantId of tenantIds) {
      const tenant = pnlTenantData.find(t => t.id === tenantId)
      if (!tenant) {
        continue // Skip if tenant not found
      }

      const invoiceId = generateInvoiceId()
      const today = new Date().toISOString().split('T')[0]
      const dueDate = new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString().split('T')[0]

      const invoice: FullInvoice = {
        id: invoiceId,
        buildingId: 'pnl-001',
        tenant: {
          name: tenant.name,
          unit: tenant.unit,
          businessNumber: tenant.businessNumber
        },
        period: period,
        items: [
          {
            description: `임대료 (Rent) - ${period}`,
            amount: tenant.monthlyRent,
            vat: tenant.vat
          },
          {
            description: '전기요금 (Electricity)',
            amount: tenant.electricityCharge,
            vat: Math.round(tenant.electricityCharge * 0.1)
          },
          {
            description: '수도요금 (Water)',
            amount: tenant.waterCharge,
            vat: Math.round(tenant.waterCharge * 0.1)
          }
        ],
        subtotal: tenant.monthlyRent + tenant.electricityCharge + tenant.waterCharge,
        totalVat: tenant.vat + Math.round(tenant.electricityCharge * 0.1) + Math.round(tenant.waterCharge * 0.1),
        grandTotal: tenant.totalAmount,
        issueDate: today,
        dueDate: dueDate,
        status: 'sent'
      }

      invoices.set(invoiceId, invoice)
      generatedInvoices.push({
        id: invoiceId,
        tenantName: tenant.name,
        amount: tenant.totalAmount
      })
    }

    const response: GenerateInvoicesResponse = {
      invoices: generatedInvoices,
      count: generatedInvoices.length
    }

    return c.json(response, 201)
  } catch (error) {
    return c.json({ error: 'Internal server error' }, 500)
  }
})

// Get invoice PDF (mock implementation)
app.get('/:id/pdf', (c: Context) => {
  try {
    const user = c.get('user') as { name: string; role: string }

    if (user.name !== 'Il Keun Lee') {
      return c.json({ error: 'Unauthorized' }, 403)
    }

    const id = c.req.param('id')
    const invoice = invoices.get(id)

    if (!invoice) {
      return c.json({ error: 'Invoice not found' }, 404)
    }

    // For MVP, return a mock PDF response
    const mockPdfContent = `
      INVOICE
      ========
      Invoice ID: ${invoice.id}
      Period: ${invoice.period}

      Tenant: ${invoice.tenant.name}
      Unit: ${invoice.tenant.unit}

      Items:
      ${invoice.items.map(item => `- ${item.description}: ₩${item.amount.toLocaleString()}`).join('\n      ')}

      Total: ₩${invoice.grandTotal.toLocaleString()}
    `

    return new Response(
      new Blob([mockPdfContent], { type: 'application/pdf' }),
      {
        headers: {
          'Content-Type': 'application/pdf',
          'Content-Disposition': `attachment; filename="invoice-${id}.pdf"`
        }
      }
    )
  } catch (error) {
    return c.json({ error: 'Internal server error' }, 500)
  }
})

export default app
</file>

<file path="src/server/api/tenants.ts">
import { Context, Hono } from 'hono'
import { pnlTenantData } from '../db/pnl-data'
import { requireAuth } from './auth'

const app = new Hono()

// Apply authentication middleware
app.use('*', requireAuth as any)

// Get all tenants for the PNL building
app.get('/', (c: Context) => {
  try {
    const user = c.get('user') as { name: string; role: string }

    // For MVP, only Il Keun Lee can access
    if (user.name !== 'Il Keun Lee') {
      return c.json({ error: 'Unauthorized' }, 403)
    }

    // Return tenant data
    return c.json(pnlTenantData)
  } catch (error) {
    return c.json({ error: 'Internal server error' }, 500)
  }
})

export default app
</file>

<file path="src/server/db/pnl-data.ts">
import type { TenantBilling } from '@/shared/types'

// Data from "PNL임차인" sheet in the Excel file
// 2025년 5월분 data
export const pnlTenantData: TenantBilling[] = [
  {
    id: 'tenant-b102',
    unit: 'B102',
    name: '디아삽',
    businessNumber: '211-10-21870',
    monthlyRent: 2080000,
    electricityCharge: 66234,
    waterCharge: 41778,
    vat: 208000,
    totalAmount: 2396012
  },
  {
    id: 'tenant-101',
    unit: '101',
    name: '늘봄약국',
    businessNumber: '298-04-00449',
    monthlyRent: 2918710,
    electricityCharge: 73424,
    waterCharge: 17397,
    vat: 291871,
    totalAmount: 3301401
  },
  {
    id: 'tenant-102',
    unit: '102',
    name: '제이랩',
    businessNumber: '720-32-00051',
    monthlyRent: 1620000,
    electricityCharge: 38564,
    waterCharge: 17397,
    vat: 162000,
    totalAmount: 1837960
  },
  {
    id: 'tenant-201',
    unit: '201',
    name: 'MK math',
    businessNumber: '261-81-02257',
    monthlyRent: 1890000,
    electricityCharge: 52749,
    waterCharge: 15961,
    vat: 189000,
    totalAmount: 2147710
  },
  {
    id: 'tenant-202',
    unit: '202',
    name: '굿슬립신경과',
    businessNumber: '201-06-71129',
    monthlyRent: 2000000,
    electricityCharge: 157982,
    waterCharge: 22967,
    vat: 200000,
    totalAmount: 2380949
  },
  {
    id: 'tenant-301',
    unit: '301',
    name: '서울브레인신경과',
    businessNumber: '211-90-68256',
    monthlyRent: 3500000,
    electricityCharge: 144692,
    waterCharge: 29159,
    vat: 350000,
    totalAmount: 4023851
  },
  {
    id: 'tenant-302',
    unit: '302',
    name: '올고톡',
    businessNumber: '211-87-84329',
    monthlyRent: 2150000,
    electricityCharge: 27258,
    waterCharge: 23203,
    vat: 215000,
    totalAmount: 2415461
  },
  {
    id: 'tenant-401',
    unit: '401',
    name: '라이언아카데미',
    businessNumber: '120-87-43696',
    monthlyRent: 2400000,
    electricityCharge: 45416,
    waterCharge: 15833,
    vat: 240000,
    totalAmount: 2701249
  },
  {
    id: 'tenant-402',
    unit: '402',
    name: '라이언아카데미',
    businessNumber: '745-87-00012',
    monthlyRent: 2080000,
    electricityCharge: 110847,
    waterCharge: 21210,
    vat: 208000,
    totalAmount: 2420057
  },
  {
    id: 'tenant-501',
    unit: '501',
    name: '다와',
    businessNumber: '211-86-76652',
    monthlyRent: 1600000,
    electricityCharge: 123994,
    waterCharge: 10817,
    vat: 160000,
    totalAmount: 1894811
  },
  {
    id: 'tenant-502',
    unit: '502',
    name: '라이언아카데미',
    businessNumber: '261-81-03770',
    monthlyRent: 1410000,
    electricityCharge: 68218,
    waterCharge: 12448,
    vat: 141000,
    totalAmount: 1631666
  },
  {
    id: 'tenant-503',
    unit: '503',
    name: '예원연습실',
    businessNumber: '000-00-00000',
    monthlyRent: 1200000,
    electricityCharge: 115497,
    waterCharge: 9512,
    vat: 120000,
    totalAmount: 1445009
  }
]

// Calculate total monthly revenue (including VAT)
export const totalMonthlyRevenue = pnlTenantData.reduce((sum, tenant) =>
  sum + tenant.monthlyRent + tenant.vat, 0
)

// Building summary
export const pnlBuildingSummary = {
  id: 'pnl-001',
  name: 'PNL Building',
  address: '서울특별시 강남구 논현로 159길 17',
  owner: 'Il Keun Lee',
  totalUnits: 13,
  occupiedUnits: 12,
  monthlyRevenue: totalMonthlyRevenue
}
</file>

<file path="src/server/renderer.tsx">
import { reactRenderer } from '@hono/react-renderer'
import { Script, Link } from 'hono-vite-react-stack/components'

export const renderer = reactRenderer(({ children }) => {
  return (
    <html>
      <head>
        <meta charSet="UTF-8" />
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <Script />
        <Link href="/src/style.css" rel="stylesheet" />
      </head>
      <body>{children}</body>
    </html>
  )
})
</file>

<file path="tests/e2e/api.spec.ts">
import { test, expect } from '@playwright/test'

test.describe('API Endpoints', () => {
  test('FR-01: GET /api/buildings returns building list', async ({ request }) => {
    const response = await request.get('/api/buildings')
    
    expect(response.status()).toBe(200)
    
    const buildings = await response.json()
    expect(Array.isArray(buildings)).toBe(true)
    expect(buildings.length).toBeGreaterThanOrEqual(1)
    
    // Verify building structure
    const building = buildings[0]
    expect(building).toHaveProperty('building_id')
    expect(building).toHaveProperty('name')
    expect(building).toHaveProperty('address')
  })
  
  test('FR-02: GET /api/leases returns leases for a building', async ({ request }) => {
    // First get buildings
    const buildingsResponse = await request.get('/api/buildings')
    const buildings = await buildingsResponse.json()
    const buildingId = buildings[0].building_id
    
    // Get leases for first building
    const response = await request.get(`/api/leases?building_id=${buildingId}`)
    
    expect(response.status()).toBe(200)
    
    const leases = await response.json()
    expect(Array.isArray(leases)).toBe(true)
    
    // Verify lease structure if we have leases
    if (leases.length > 0) {
      const lease = leases[0]
      expect(lease).toHaveProperty('lease_id')
      expect(lease).toHaveProperty('tenant_name')
      expect(lease).toHaveProperty('rent_amount')
    }
  })
  
  test('FR-02: GET /api/leases returns 404 for unknown building', async ({ request }) => {
    const response = await request.get('/api/leases?building_id=unknown-building')
    
    expect(response.status()).toBe(404)
    
    const error = await response.json()
    expect(error).toHaveProperty('error')
    expect(error.error).toContain('Unknown building')
  })
  
  test('FR-03: POST /api/invoices creates invoice with valid lease', async ({ request }) => {
    // First get a valid lease
    const buildingsResponse = await request.get('/api/buildings')
    const buildings = await buildingsResponse.json()
    const buildingId = buildings[0].building_id
    
    const leasesResponse = await request.get(`/api/leases?building_id=${buildingId}`)
    const leases = await leasesResponse.json()
    const leaseId = leases[0].lease_id
    
    // Create invoice
    const response = await request.post('/api/invoices', {
      data: {
        lease_id: leaseId
      }
    })
    
    expect(response.status()).toBe(201)
    
    const result = await response.json()
    expect(result).toHaveProperty('invoice_id')
    expect(result.invoice_id).toBeTruthy()
  })
  
  test('FR-03: POST /api/invoices returns 422 for invalid body', async ({ request }) => {
    const response = await request.post('/api/invoices', {
      data: {
        // Missing lease_id
      }
    })
    
    expect(response.status()).toBe(422)
    
    const error = await response.json()
    expect(error).toHaveProperty('error')
    expect(error.error).toContain('Validation failed')
  })
  
  test('FR-03: POST /api/invoices returns 404 for unknown lease', async ({ request }) => {
    const response = await request.post('/api/invoices', {
      data: {
        lease_id: 'unknown-lease-id'
      }
    })
    
    expect(response.status()).toBe(404)
    
    const error = await response.json()
    expect(error).toHaveProperty('error')
    expect(error.error).toContain('Unknown lease')
  })
  
  test('FR-04: GET /api/invoices/:id returns invoice details', async ({ request }) => {
    // First create an invoice
    const buildingsResponse = await request.get('/api/buildings')
    const buildings = await buildingsResponse.json()
    const buildingId = buildings[0].building_id
    
    const leasesResponse = await request.get(`/api/leases?building_id=${buildingId}`)
    const leases = await leasesResponse.json()
    const leaseId = leases[0].lease_id
    
    const createResponse = await request.post('/api/invoices', {
      data: {
        lease_id: leaseId
      }
    })
    const { invoice_id } = await createResponse.json()
    
    // Get the invoice
    const response = await request.get(`/api/invoices/${invoice_id}`)
    
    expect(response.status()).toBe(200)
    
    const invoice = await response.json()
    expect(invoice).toHaveProperty('invoice_id')
    expect(invoice).toHaveProperty('lines')
    expect(Array.isArray(invoice.lines)).toBe(true)
  })
  
  test('FR-04: GET /api/invoices/:id returns 404 for unknown invoice', async ({ request }) => {
    const response = await request.get('/api/invoices/unknown-invoice-id')
    
    expect(response.status()).toBe(404)
    
    const error = await response.json()
    expect(error).toHaveProperty('error')
    expect(error.error).toContain('Invoice not found')
  })
  
  test('FR-05: GET /api/healthz returns ok', async ({ request }) => {
    const response = await request.get('/api/healthz')
    
    expect(response.status()).toBe(200)
    
    const text = await response.text()
    expect(text).toBe('ok')
  })
})
</file>

<file path="tests/e2e/invoices.spec.ts">
import { expect, test } from '@playwright/test'

test.describe('Invoice Generation API', () => {
  const API_BASE = process.env.API_URL || 'http://localhost:5173/api'
  let authToken: string

  test.beforeEach(async ({ request }) => {
    // Login before each test
    const loginResponse = await request.post(`${API_BASE}/auth/mock-login`, {
      data: {
        name: 'Il Keun Lee'
      }
    })
    const loginData = await loginResponse.json()
    authToken = loginData.token
  })

  test('POST /api/invoices/generate accepts period and tenant list', async ({ request }) => {
    const response = await request.post(`${API_BASE}/invoices/generate`, {
      headers: {
        'Authorization': `Bearer ${authToken}`,
        'Content-Type': 'application/json'
      },
      data: {
        period: '2025년 5월',
        tenantIds: ['tenant-b102', 'tenant-101']
      }
    })

    expect(response.ok()).toBeTruthy()
    expect(response.status()).toBe(201)

    const body = await response.json()
    expect(body).toHaveProperty('invoices')
    expect(body).toHaveProperty('count')
    expect(body.count).toBe(2)
  })

  test('Generated invoice contains all required fields', async ({ request }) => {
    const response = await request.post(`${API_BASE}/invoices/generate`, {
      headers: {
        'Authorization': `Bearer ${authToken}`,
        'Content-Type': 'application/json'
      },
      data: {
        period: '2025년 5월',
        tenantIds: ['tenant-301'] // 서울브레인신경과
      }
    })

    const body = await response.json()
    expect(body.invoices).toHaveLength(1)

    const invoice = body.invoices[0]
    expect(invoice).toHaveProperty('id')
    expect(invoice).toHaveProperty('tenantName')
    expect(invoice).toHaveProperty('amount')
    expect(invoice.tenantName).toBe('서울브레인신경과')
  })

  test('Invoice calculates rent + electricity + water correctly', async ({ request }) => {
    const response = await request.post(`${API_BASE}/invoices/generate`, {
      headers: {
        'Authorization': `Bearer ${authToken}`,
        'Content-Type': 'application/json'
      },
      data: {
        period: '2025년 5월',
        tenantIds: ['tenant-301'] // Unit 301
      }
    })

    const body = await response.json()
    const invoice = body.invoices[0]

    // From Excel: 301 - 서울브레인신경과
    // Rent: 3,500,000 + Electricity: 144,692 + Water: 29,159 + VAT = 4,023,851
    expect(invoice.amount).toBe(4023851)
  })

  test('Multiple invoices can be generated in one request', async ({ request }) => {
    const response = await request.post(`${API_BASE}/invoices/generate`, {
      headers: {
        'Authorization': `Bearer ${authToken}`,
        'Content-Type': 'application/json'
      },
      data: {
        period: '2025년 5월',
        tenantIds: ['tenant-b102', 'tenant-101', 'tenant-102', 'tenant-201', 'tenant-202']
      }
    })

    const body = await response.json()
    expect(body.count).toBe(5)
    expect(body.invoices).toHaveLength(5)

    // Verify each invoice has correct structure
    body.invoices.forEach((invoice: any) => {
      expect(invoice.id).toBeTruthy()
      expect(invoice.tenantName).toBeTruthy()
      expect(invoice.amount).toBeGreaterThan(0)
    })
  })

  test('GET /api/invoices/{id}/pdf returns PDF file', async ({ request }) => {
    // First generate an invoice
    const generateResponse = await request.post(`${API_BASE}/invoices/generate`, {
      headers: {
        'Authorization': `Bearer ${authToken}`,
        'Content-Type': 'application/json'
      },
      data: {
        period: '2025년 5월',
        tenantIds: ['tenant-301']
      }
    })

    const { invoices } = await generateResponse.json()
    const invoiceId = invoices[0].id

    // Then download the PDF
    const pdfResponse = await request.get(`${API_BASE}/invoices/${invoiceId}/pdf`, {
      headers: {
        'Authorization': `Bearer ${authToken}`
      }
    })

    expect(pdfResponse.ok()).toBeTruthy()
    expect(pdfResponse.headers()['content-type']).toBe('application/pdf')
    expect(pdfResponse.headers()['content-disposition']).toContain(`invoice-${invoiceId}.pdf`)
  })
})
</file>

<file path="tests/e2e/tenants.spec.ts">
import { expect, test } from '@playwright/test'

test.describe('Tenants API', () => {
  const API_BASE = process.env.API_URL || 'http://localhost:5173/api'
  let authToken: string

  test.beforeEach(async ({ request }) => {
    // Login before each test
    const loginResponse = await request.post(`${API_BASE}/auth/mock-login`, {
      data: {
        name: 'Il Keun Lee'
      }
    })
    const loginData = await loginResponse.json()
    authToken = loginData.token
  })

  test('GET /api/tenants returns all PNL building tenants', async ({ request }) => {
    const response = await request.get(`${API_BASE}/tenants`, {
      headers: {
        'Authorization': `Bearer ${authToken}`
      }
    })

    expect(response.ok()).toBeTruthy()
    expect(response.status()).toBe(200)

    const tenants = await response.json()
    expect(Array.isArray(tenants)).toBeTruthy()
    expect(tenants.length).toBe(12) // 12 occupied units
  })

  test('Each tenant has correct unit number, name, and business number', async ({ request }) => {
    const response = await request.get(`${API_BASE}/tenants`, {
      headers: {
        'Authorization': `Bearer ${authToken}`
      }
    })

    const tenants = await response.json()

    // Check first tenant (B102 - 디아삽)
    const firstTenant = tenants.find((t: any) => t.unit === 'B102')
    expect(firstTenant).toMatchObject({
      unit: 'B102',
      name: '디아삽',
      businessNumber: '211-10-21870'
    })
  })

  test('Tenant data matches Excel sheet values exactly', async ({ request }) => {
    const response = await request.get(`${API_BASE}/tenants`, {
      headers: {
        'Authorization': `Bearer ${authToken}`
      }
    })

    const tenants = await response.json()

    // Check specific tenant data from Excel
    const tenant301 = tenants.find((t: any) => t.unit === '301')
    expect(tenant301).toMatchObject({
      unit: '301',
      name: '서울브레인신경과',
      businessNumber: '211-90-68256',
      monthlyRent: 3500000,
      electricityCharge: 144692,
      waterCharge: 29159
    })
  })

  test('Rent amounts are accurate for each unit', async ({ request }) => {
    const response = await request.get(`${API_BASE}/tenants`, {
      headers: {
        'Authorization': `Bearer ${authToken}`
      }
    })

    const tenants = await response.json()

    // Verify rent amounts for several units
    const rentAmounts = {
      'B102': 2080000,
      '101': 2918710,
      '102': 1620000,
      '201': 1890000,
      '202': 2000000
    }

    Object.entries(rentAmounts).forEach(([unit, expectedRent]) => {
      const tenant = tenants.find((t: any) => t.unit === unit)
      expect(tenant.monthlyRent).toBe(expectedRent)
    })
  })

  test('VAT is calculated as 10% of rent', async ({ request }) => {
    const response = await request.get(`${API_BASE}/tenants`, {
      headers: {
        'Authorization': `Bearer ${authToken}`
      }
    })

    const tenants = await response.json()

    // Check VAT calculation for each tenant
    tenants.forEach((tenant: any) => {
      const expectedVat = Math.round(tenant.monthlyRent * 0.1)
      expect(tenant.vat).toBe(expectedVat)
    })
  })
})
</file>

<file path="tests/e2e/ui.spec.ts">
import { test, expect } from '@playwright/test'

test.describe('UI Acceptance Tests', () => {
  test('UI loads building list within 3 seconds', async ({ page }) => {
    const startTime = Date.now()
    
    await page.goto('/invoices/new')
    
    // Wait for building select to be enabled (indicates data loaded)
    const buildingSelect = page.locator('#building')
    await expect(buildingSelect).toBeEnabled({ timeout: 3000 })
    
    const loadTime = Date.now() - startTime
    
    // Verify load time is under 3 seconds (3000ms)
    expect(loadTime).toBeLessThan(3000)
    
    // Click on building select and verify buildings are displayed
    await buildingSelect.click()
    await expect(page.getByRole('option', { name: 'Main Plaza' })).toBeVisible()
    await expect(page.getByRole('option', { name: 'Tech Center' })).toBeVisible()
    await expect(page.getByRole('option', { name: 'West Tower' })).toBeVisible()
  })
  
  test('Invoice creation shows toast notification', async ({ page }) => {
    await page.goto('/invoices/new')
    
    // Select building
    await page.locator('#building').click()
    await page.getByRole('option', { name: 'Main Plaza' }).click()
    
    // Wait for tenants to load and select one
    await page.locator('#tenant').click()
    await page.getByRole('option', { name: 'ABC Corp' }).click()
    
    // Submit form
    await page.getByRole('button', { name: 'Generate Invoice' }).click()
    
    // Wait for toast notification
    await expect(page.getByText('Invoice created successfully')).toBeVisible({ timeout: 5000 })
    
    // Should show invoice ID in toast description
    await expect(page.getByText(/Invoice ID: inv-/)).toBeVisible()
  })
  
  test('Form populates lease data correctly', async ({ page }) => {
    await page.goto('/invoices/new')
    
    // Select building
    await page.locator('#building').click()
    await page.getByRole('option', { name: 'Main Plaza' }).click()
    
    // Select tenant
    await page.locator('#tenant').click()
    await page.getByRole('option', { name: 'ABC Corp' }).click()
    
    // Verify amount and description are populated
    const amountInput = page.locator('#amount')
    await expect(amountInput).toHaveValue('5000')
    
    const descriptionInput = page.locator('#description')
    await expect(descriptionInput).toHaveValue('Monthly Rent - ABC Corp')
  })
  
  test('Tenant dropdown is disabled until building is selected', async ({ page }) => {
    await page.goto('/invoices/new')
    
    // Initially tenant dropdown should be disabled
    const tenantTrigger = page.locator('#tenant')
    await expect(tenantTrigger).toBeDisabled()
    
    // Select building
    await page.locator('#building').click()
    await page.getByRole('option', { name: 'Tech Center' }).click()
    
    // Now tenant dropdown should be enabled
    await expect(tenantTrigger).toBeEnabled()
    
    // And should show tenants for selected building
    await tenantTrigger.click()
    await expect(page.getByRole('option', { name: 'Tech Startup Inc' })).toBeVisible()
    await expect(page.getByRole('option', { name: 'Innovation Labs' })).toBeVisible()
  })
  
  test('Form validation prevents submission without lease', async ({ page }) => {
    await page.goto('/invoices/new')
    
    // Try to submit without selecting anything
    const submitButton = page.getByRole('button', { name: 'Generate Invoice' })
    await expect(submitButton).toBeDisabled()
    
    // Select only building
    await page.locator('#building').click()
    await page.getByRole('option', { name: 'Main Plaza' }).click()
    
    // Submit should still be disabled
    await expect(submitButton).toBeDisabled()
    
    // Select tenant
    await page.locator('#tenant').click()
    await page.getByRole('option', { name: 'XYZ LLC' }).click()
    
    // Now submit should be enabled
    await expect(submitButton).toBeEnabled()
  })
})
</file>

<file path="tests/e2e/user-flow.spec.ts">
import { expect, test } from '@playwright/test'

test.describe('MVP User Flow', () => {
  test.beforeEach(async ({ page }) => {
    // Start fresh by clearing localStorage
    await page.goto('http://localhost:5173')
    await page.evaluate(() => localStorage.clear())
  })

  test('Complete user flow: Login → Dashboard → Generate Invoices', async ({ page }) => {
    // Step 1: Should redirect to login when not authenticated
    await page.goto('http://localhost:5173')
    await expect(page).toHaveURL('http://localhost:5173/login')

    // Step 2: Login page should have proper form
    await expect(page.locator('h1')).toContainText('Leasy 로그인')
    await expect(page.locator('label')).toContainText('이름')
    await expect(page.locator('input[type="text"]')).toBeVisible()
    await expect(page.locator('button[type="submit"]')).toContainText('로그인')

    // Step 3: Try invalid login
    await page.fill('input[type="text"]', 'Unknown User')
    await page.click('button[type="submit"]')

    // Should show error toast
    await expect(page.locator('.toast-error')).toBeVisible()

    // Step 4: Login with correct user
    await page.fill('input[type="text"]', 'Il Keun Lee')
    await page.click('button[type="submit"]')

    // Step 5: Should redirect to dashboard
    await expect(page).toHaveURL('http://localhost:5173/dashboard')

    // Step 6: Dashboard should show building info
    await expect(page.locator('h1')).toContainText('대시보드')
    await expect(page.locator('text=PNL Building')).toBeVisible()
    await expect(page.locator('text=서울특별시 강남구')).toBeVisible()

    // Step 7: Should show tenant count and revenue
    await expect(page.locator('text=12명')).toBeVisible() // 12 tenants
    await expect(page.locator('text=₩27,333,581')).toBeVisible() // Monthly revenue

    // Step 8: Navigate to invoice generation
    await page.click('text=청구서 생성')
    await expect(page).toHaveURL('http://localhost:5173/invoices/generate')

    // Step 9: Invoice generation page should have proper elements
    await expect(page.locator('h1')).toContainText('월별 청구서 생성')
    await expect(page.locator('select')).toBeVisible() // Period selector

    // Step 10: Should show all tenants with checkboxes
    const tenants = [
      '엠에스메디칼',
      '더열린정형외과',
      '엠에스치과',
      '서울더리얼피부과',
      '서울정형외과',
      '서울브레인신경과',
      '굿모닝소아청소년과의원',
      '미소로치과',
      '명성흉부외과의원',
      '더블유외과의원',
      '더좋은정형외과의원',
      '365탑비뇨의학과의원'
    ]

    for (const tenant of tenants) {
      await expect(page.locator(`text=${tenant}`)).toBeVisible()
    }

    // All checkboxes should be checked by default
    const checkboxes = await page.locator('input[type="checkbox"]').all()
    expect(checkboxes).toHaveLength(12)
    for (const checkbox of checkboxes) {
      await expect(checkbox).toBeChecked()
    }

    // Step 11: Select period and generate invoices
    await page.selectOption('select', '2025년 1월')

    // Uncheck a few tenants
    await page.locator('text=미소로치과').locator('..').locator('input[type="checkbox"]').uncheck()
    await page.locator('text=365탑비뇨의학과의원').locator('..').locator('input[type="checkbox"]').uncheck()

    // Generate invoices
    await page.click('button:has-text("청구서 생성")')

    // Step 12: Should show success message
    await expect(page.locator('text=10개의 청구서가 생성되었습니다')).toBeVisible()

    // Step 13: Verify invoice download works
    // Note: In real test, we'd verify download, but for UI test we just check the element exists
    const downloadButtons = await page.locator('button:has-text("PDF 다운로드")').all()
    expect(downloadButtons).toHaveLength(10) // 12 - 2 unchecked = 10

    // Step 14: Test logout
    await page.click('button:has-text("로그아웃")')
    await expect(page).toHaveURL('http://localhost:5173/login')

    // Step 15: Verify can't access protected pages after logout
    await page.goto('http://localhost:5173/dashboard')
    await expect(page).toHaveURL('http://localhost:5173/login')
  })

  test('Dashboard displays accurate financial data', async ({ page }) => {
    // Login first
    await page.goto('http://localhost:5173/login')
    await page.fill('input[type="text"]', 'Il Keun Lee')
    await page.click('button[type="submit"]')

    // Wait for dashboard
    await expect(page).toHaveURL('http://localhost:5173/dashboard')

    // Verify all key metrics are displayed
    await expect(page.locator('text=임대 가능 유닛')).toBeVisible()
    await expect(page.locator('text=12/12')).toBeVisible() // All units occupied

    await expect(page.locator('text=현재 임차인')).toBeVisible()
    await expect(page.locator('text=12명')).toBeVisible()

    await expect(page.locator('text=월 수익')).toBeVisible()
    await expect(page.locator('text=₩27,333,581')).toBeVisible()
  })

  test('Invoice generation calculates amounts correctly', async ({ page }) => {
    // Login and navigate to invoice generation
    await page.goto('http://localhost:5173/login')
    await page.fill('input[type="text"]', 'Il Keun Lee')
    await page.click('button[type="submit"]')

    await page.click('text=청구서 생성')

    // Generate invoice for just one tenant to verify calculation
    // Uncheck all except 서울브레인신경과 (301)
    const checkboxes = await page.locator('input[type="checkbox"]').all()
    for (let i = 0; i < checkboxes.length; i++) {
      await checkboxes[i].uncheck()
    }

    // Check only 서울브레인신경과
    await page.locator('text=서울브레인신경과').locator('..').locator('input[type="checkbox"]').check()

    await page.click('button:has-text("청구서 생성")')

    // Should show 1 invoice generated
    await expect(page.locator('text=1개의 청구서가 생성되었습니다')).toBeVisible()

    // Verify the amount shown
    // From Excel: Rent 3,500,000 + Electricity 144,692 + Water 29,159 + VAT = 4,023,851
    await expect(page.locator('text=₩4,023,851')).toBeVisible()
  })

  test('Responsive design works on mobile', async ({ page }) => {
    // Set mobile viewport
    await page.setViewportSize({ width: 375, height: 667 })

    // Login
    await page.goto('http://localhost:5173/login')
    await page.fill('input[type="text"]', 'Il Keun Lee')
    await page.click('button[type="submit"]')

    // Dashboard should be responsive
    await expect(page.locator('h1')).toContainText('대시보드')
    await expect(page.locator('.grid')).toHaveCSS('grid-template-columns', '1fr')

    // Navigate to invoice generation
    await page.click('text=청구서 생성')

    // Should still be functional on mobile
    await expect(page.locator('h1')).toContainText('월별 청구서 생성')
    await expect(page.locator('select')).toBeVisible()
  })
})
</file>

<file path="tests/README.md">
# E2E Testing Guide

## Overview
This directory contains end-to-end tests for the Leasy invoice generator application using Playwright.

## Test Structure

```
tests/
├── e2e/                    # E2E test specifications
│   ├── auth.spec.ts       # Authentication flow tests
│   ├── dashboard.spec.ts  # Dashboard functionality tests
│   ├── invoice-generation.spec.ts  # Invoice creation tests
│   ├── full-journey.spec.ts      # Complete user journey tests
│   └── smoke.spec.ts      # Basic smoke tests
├── pages/                 # Page Object Model classes
│   ├── base.page.ts      # Base page class with common methods
│   ├── login.page.ts     # Login page interactions
│   ├── dashboard.page.ts # Dashboard page interactions
│   └── invoice-form.page.ts # Invoice form interactions
└── fixtures/             # Test data and utilities
    └── data/
        └── test-data.ts  # Centralized test data

```

## Running Tests

### Prerequisites
```bash
# Install Playwright browsers (one-time setup)
npx playwright install

# Install system dependencies (if needed)
npx playwright install-deps
```

### Run all tests
```bash
npm run test:e2e
```

### Run specific test file
```bash
npm run test:e2e tests/e2e/auth.spec.ts
```

### Run tests in UI mode
```bash
npm run test:e2e:ui
```

### Run tests with specific browser
```bash
npm run test:e2e -- --project=chromium
```

## Writing Tests

### Page Object Model
We use the Page Object Model pattern for maintainable tests:

```typescript
// pages/example.page.ts
export class ExamplePage extends BasePage {
  private readonly submitButton: Locator
  
  constructor(page: Page) {
    super(page)
    this.submitButton = page.getByRole('button', { name: 'Submit' })
  }
  
  async clickSubmit() {
    await this.clickElement(this.submitButton)
  }
}
```

### Test Structure
```typescript
test.describe('Feature Name', () => {
  test.beforeEach(async ({ page }) => {
    // Setup before each test
  })
  
  test('should do something', async ({ page }) => {
    // Arrange
    const loginPage = new LoginPage(page)
    
    // Act
    await loginPage.goto()
    await loginPage.login()
    
    // Assert
    await expect(page).toHaveURL('/dashboard')
  })
})
```

## Test Data

Test data is centralized in `fixtures/data/test-data.ts`:
- Mock users
- Sample buildings
- Sample tenants
- Sample invoices

## Authentication

The application uses a mock authentication system for testing:
- Mock Google OAuth flow
- Session-based authentication
- Automatic login helper in page objects

## Best Practices

1. **Use Page Objects**: Encapsulate page interactions
2. **Descriptive Names**: Use clear, descriptive test names
3. **Independent Tests**: Each test should be independent
4. **Wait Strategies**: Use Playwright's auto-waiting
5. **Assertions**: Use explicit assertions
6. **Screenshots**: Take screenshots on failure

## Debugging

### View test report
```bash
npx playwright show-report
```

### Debug specific test
```bash
npm run test:e2e -- --debug tests/e2e/auth.spec.ts
```

### Use VS Code extension
Install the Playwright Test for VS Code extension for better debugging experience.

## CI/CD Integration

Tests are configured to run in CI with:
- Parallel execution disabled in CI
- Retries on failure
- HTML report generation

## Common Issues

### Browser not installed
```bash
npx playwright install chromium
```

### Port already in use
The dev server runs on port 5173. Make sure it's not already running.

### Flaky tests
- Use proper wait strategies
- Avoid hard-coded timeouts
- Check for race conditions

## Future Improvements

- [ ] Add visual regression tests
- [ ] Implement API mocking with MSW
- [ ] Add performance testing
- [ ] Create more test fixtures
- [ ] Add accessibility tests
</file>

<file path="tests/test-scenarios.md">
# Test Scenarios for Leasy MVP

Following Canon TDD approach - listing all test scenarios before implementation.

## 1. Mock Authentication Tests

- [x] POST /api/auth/mock-login accepts "Il Keun Lee" and returns success
- [x] Mock login creates a session token
- [x] Invalid/empty name returns 400 error
- [x] Session persists across requests
- [x] Logout clears session

## 2. Dashboard API Tests

- [x] GET /api/dashboard returns building data for logged-in user
- [x] Dashboard shows PNL building information
- [x] Dashboard calculates total monthly revenue correctly (₩27,333,581)
- [x] Dashboard shows correct tenant count (12 occupied units)
- [x] Unauthorized request returns 401 error

## 3. Tenant Data Tests

- [x] GET /api/tenants returns all PNL building tenants
- [x] Each tenant has correct unit number, name, and business number
- [x] Tenant data matches Excel sheet values exactly
- [x] Rent amounts are accurate for each unit
- [x] VAT is calculated as 10% of rent

## 4. Invoice Generation Tests

- [x] POST /api/invoices/generate accepts period and tenant list
- [x] Generated invoice contains all required fields
- [x] Invoice calculates rent + electricity + water correctly
- [x] VAT is properly calculated for each line item
- [x] Total amount matches sum of all items plus VAT
- [x] Invoice ID is generated uniquely
- [x] Multiple invoices can be generated in one request

## 5. PDF Generation Tests

- [x] GET /api/invoices/{id}/pdf returns PDF file
- [x] PDF contains all invoice data
- [x] PDF is properly formatted (mock)
- [x] Non-existent invoice ID returns 404

## 6. E2E User Flow Tests

- [ ] User can complete full flow: login → dashboard → generate → download
- [ ] Form validation shows appropriate error messages
- [ ] Loading states display during async operations
- [ ] Success messages show after invoice generation
- [ ] Navigation between pages works correctly

## 7. Data Validation Tests

- [ ] Excel data parser handles Korean characters correctly
- [ ] Number formatting handles Korean won currency
- [ ] Date formatting is consistent
- [ ] Missing data fields are handled gracefully

## 8. UI Component Tests

- [ ] Login form submits on enter key
- [ ] Dashboard cards display correct metrics
- [ ] Tenant selection checkboxes work properly
- [ ] Generate button is disabled when no tenants selected
- [ ] Download links work for generated PDFs

## 9. Mock Service Worker Tests

- [ ] MSW intercepts all API calls correctly
- [ ] Mock responses match expected data structure
- [ ] Network errors are simulated properly
- [ ] Loading states work with delayed responses

## 10. Form Validation Tests

- [ ] Period selector validates date format
- [ ] At least one tenant must be selected
- [ ] Form shows validation errors inline
- [ ] Submit is prevented with invalid data

## 11. State Management Tests

- [ ] User session state persists
- [ ] Generated invoices are stored in session
- [ ] Navigation maintains application state
- [ ] Refresh doesn't lose generated invoices

## 12. Error Handling Tests

- [ ] API errors show user-friendly messages
- [ ] Network failures are handled gracefully
- [ ] Invalid data doesn't crash the app
- [ ] Retry mechanisms work for failed requests

## 13. Performance Tests

- [ ] Page loads within 3 seconds
- [ ] Invoice generation completes within 5 seconds
- [ ] PDF generation completes within 10 seconds
- [ ] Large tenant lists render efficiently

## 14. Accessibility Tests

- [ ] All interactive elements are keyboard accessible
- [ ] ARIA labels are present and correct
- [ ] Color contrast meets WCAG standards
- [ ] Screen reader announces important updates

## 15. Responsive Design Tests

- [ ] Layout works on mobile devices
- [ ] Tables are scrollable on small screens
- [ ] Forms are usable on touch devices
- [ ] PDF download works on mobile
</file>

<file path="DESIGN_DECISIONS.md">
# Design Decisions Document

## Overview
This document captures key design decisions made during the implementation of the Leasy invoice generator application and its E2E testing infrastructure.

## Architecture Decisions

### 1. Technology Stack

**Decision**: Hono + Vite + React on Cloudflare Workers

**Rationale**:
- **Hono**: Lightweight, fast web framework optimized for edge computing
- **Vite**: Modern build tool with excellent DX and HMR support
- **React 19**: Latest features including improved SSR and hooks
- **Cloudflare Workers**: Edge-first deployment with global distribution

**Trade-offs**:
- Limited Node.js compatibility (e.g., PDF generation libraries)
- Smaller ecosystem compared to traditional Node.js

### 2. Authentication Strategy

**Decision**: Simplified session-based auth with mock Google OAuth

**Rationale**:
- Quick MVP implementation
- Easy to replace with real OAuth providers
- Session cookies work well with SSR

**Assumptions**:
- Production will use proper OAuth implementation
- Sessions are acceptable (vs JWT tokens)

### 3. Data Persistence

**Decision**: In-memory storage for MVP

**Rationale**:
- Zero infrastructure requirements
- Fast development iteration
- Easy to replace with real database

**Implementation**:
```typescript
// Simple Map-based storage
const sessions = new Map<string, any>()
```

## UI/UX Decisions

### 1. Component Library

**Decision**: shadcn/ui components with Radix UI primitives

**Rationale**:
- Full control over styling
- Accessibility built-in
- Modern, clean aesthetic
- Copy-paste flexibility

**Trade-offs**:
- More initial setup vs pre-built libraries
- Need to maintain component code

### 2. Form Handling

**Decision**: Controlled components with React state

**Rationale**:
- Simple for MVP
- Real-time calculations
- Easy validation

**Future Considerations**:
- Could integrate React Hook Form for complex forms
- TanStack Form for type-safe forms

## Testing Decisions

### 1. E2E Testing Framework

**Decision**: Playwright with TypeScript

**Rationale**:
- Modern, reliable cross-browser testing
- Excellent debugging tools (trace viewer)
- Strong TypeScript support
- Auto-waiting and retry mechanisms

### 2. Test Structure

**Decision**: Page Object Model (POM) pattern

**Rationale**:
- Separates test logic from UI interactions
- Improves maintainability
- Enables reusability
- Industry best practice

**Structure**:
```
tests/
├── pages/          # Page objects
├── fixtures/       # Test data & mocks
├── e2e/           # Test specs
└── setup/         # Configuration
```

### 3. API Mocking Strategy

**Decision**: Mock Service Worker (MSW) for API mocking

**Rationale**:
- Network-level interception
- Same mocks for dev and test
- No application code changes
- Realistic testing conditions

**Implementation Notes**:
- Due to Playwright limitations, using built-in mock auth
- MSW prepared for future integration

### 4. Test Data Management

**Decision**: Centralized test data with TypeScript

**Rationale**:
- Type safety
- Single source of truth
- Easy to maintain
- Consistent across tests

## Code Organization

### 1. Shared Types

**Decision**: Shared types directory for client/server

**Rationale**:
- DRY principle
- Type safety across boundaries
- Zod schemas for runtime validation

### 2. Minimal Abstractions

**Decision**: Start simple, refactor when needed

**Rationale**:
- Avoid over-engineering
- Clear, readable code
- Easy onboarding

## Performance Considerations

### 1. PDF Generation

**Decision**: Placeholder implementation for MVP

**Rationale**:
- React PDF incompatible with Workers
- Allows progress on other features
- Can implement server-side solution later

**Future Options**:
- Separate PDF service
- Server-side rendering
- Third-party PDF API

### 2. State Management

**Decision**: React Query for server state

**Rationale**:
- Built-in caching
- Optimistic updates
- Background refetching
- Minimal boilerplate

## Security Considerations

### 1. Authentication

**Assumptions**:
- HTTPS only in production
- HttpOnly cookies for sessions
- CSRF protection needed
- Rate limiting required

### 2. Input Validation

**Decision**: Zod schemas on client and server

**Rationale**:
- Runtime type checking
- Consistent validation
- Good error messages

## Future Enhancements

### Priority 1
- Real Google OAuth integration
- Persistent database (PostgreSQL/D1)
- PDF generation service
- Email notifications

### Priority 2
- Multi-tenancy support
- Advanced reporting
- Bulk operations
- Mobile app

### Priority 3
- Webhooks/integrations
- Advanced permissions
- Audit logging
- Internationalization

## Lessons Learned

1. **Edge constraints**: Not all Node.js libraries work in Workers
2. **Type safety**: Zod + TypeScript provides excellent DX
3. **Component architecture**: shadcn/ui approach scales well
4. **Testing complexity**: Browser automation requires setup
5. **Mock data**: Centralized test data improves maintainability

## Decision Log

| Date | Decision | Rationale | Impact |
|------|----------|-----------|--------|
| 2024-01 | Use Hono framework | Edge-optimized | High |
| 2024-01 | shadcn/ui components | Flexibility | Medium |
| 2024-01 | In-memory storage | MVP speed | High |
| 2024-01 | Playwright testing | Modern E2E | High |
| 2024-01 | Mock auth for MVP | Development speed | Medium |

---

This document should be updated as new significant decisions are made.
</file>

<file path="MVP_IMPLEMENTATION_SUMMARY.md">
# Leasy Invoice Generator MVP - Implementation Summary

## Overview

This is a bare-bones MVP implementation of the Leasy invoice generation system following Test-Driven Development (TDD) principles as described in Canon TDD.

## Implemented Features

### 1. Mock Authentication System
- **Endpoint**: `POST /api/auth/mock-login`
- **Implementation**: Simple session-based auth with in-memory storage
- **Test Coverage**: 100% - All authentication scenarios tested
- **Location**: `src/server/api/auth.ts`

### 2. Dashboard API
- **Endpoint**: `GET /api/dashboard`
- **Data**: Shows PNL building data for Il Keun Lee
- **Monthly Revenue**: ₩27,333,581 (calculated from Excel data)
- **Test Coverage**: 100% - All dashboard scenarios tested
- **Location**: `src/server/api/dashboard.ts`

### 3. Tenant Data Management
- **Data Source**: Excel sheet "PNL임차인"
- **Tenants**: 12 units with real data from Excel
- **Location**: `src/server/db/pnl-data.ts`

### 4. Invoice Generation
- **Endpoint**: `POST /api/invoices/generate`
- **Features**:
  - Period selection
  - Multi-tenant selection
  - Real data from Excel sheets
- **Location**: `src/client/pages/invoice-generate.tsx`

### 5. Mock Service Worker (MSW)
- **Purpose**: Frontend API mocking for development
- **Handlers**: All API endpoints mocked
- **Location**: `src/client/mocks/`

## Technology Stack Used

- **Frontend**: React 19, TypeScript, Vite
- **Backend**: Hono.js, Cloudflare Workers
- **Testing**: Playwright (E2E)
- **Mocking**: Mock Service Worker (MSW)
- **Validation**: Zod
- **UI**: Tailwind CSS, shadcn/ui
- **State**: React Query

## Test Results

### Completed Test Scenarios
- ✅ Mock Authentication (5/5 tests passing)
- ✅ Dashboard API (5/5 tests passing)
- ✅ Tenant Data Tests (5/5 tests passing)
- ✅ Invoice Generation Tests (5/5 tests passing)
- ✅ PDF Generation Tests (included in invoice tests)

**Total: 20/20 API tests passing**

## User Flow

1. **Login**: User visits `/login` and enters "Il Keun Lee"
2. **Dashboard**: Shows PNL building overview with key metrics
3. **Invoice Generation**: Navigate to `/invoices/generate`
4. **Select & Generate**: Choose tenants and generate invoices
5. **Download**: Mock PDF download functionality

## Key Design Decisions

1. **No Real Auth**: Simplified mock authentication for MVP
2. **In-Memory Storage**: No database, data resets on deploy
3. **Static Excel Data**: Hardcoded from provided Excel sheets
4. **No PDF Generation**: Mock PDF responses only
5. **Single User**: Only Il Keun Lee can access the system

## API Endpoints

```typescript
POST   /api/auth/mock-login     // Mock login
POST   /api/auth/logout         // Logout
GET    /api/dashboard           // Building dashboard
GET    /api/tenants            // List tenants with billing
POST   /api/invoices/generate  // Generate invoices
GET    /api/invoices/:id/pdf   // Download PDF (mock)
```

## Data Accuracy

All financial data matches the Excel sheet exactly:
- Monthly rent amounts
- Electricity charges
- Water charges
- VAT calculations
- Total revenue: ₩27,333,581

## Running the Application

```bash
# Install dependencies
npm install

# Run tests
npm run test:e2e

# Start development server
npm run dev

# Access at http://localhost:5173
```

## Next Steps (Post-MVP)

1. Implement real authentication (Better Auth)
2. Add database persistence
3. Implement actual PDF generation
4. Add email notifications
5. Multi-building support
6. Payment tracking
7. Historical data

## Notes

- This MVP demonstrates the core value proposition
- All test scenarios were defined upfront (Canon TDD)
- Implementation is minimal but functional
- Ready for user testing and feedback
</file>

<file path="playwright.config.ts">
import { defineConfig, devices } from '@playwright/test'

export default defineConfig({
  testDir: './tests/e2e',
  fullyParallel: true,
  forbidOnly: !!process.env.CI,
  retries: process.env.CI ? 2 : 0,
  workers: process.env.CI ? 1 : undefined,
  reporter: 'html',
  use: {
    baseURL: 'http://localhost:5173',
    trace: 'on-first-retry',
  },
  projects: [
    {
      name: 'chromium',
      use: { ...devices['Desktop Chrome'] },
    },
  ],
  webServer: {
    command: 'npm run dev',
    port: 5173,
    reuseExistingServer: !process.env.CI,
  },
})
</file>

<file path="postcss.config.js">
export default {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}
</file>

<file path="wrangler.jsonc">
{
  "$schema": "node_modules/wrangler/config-schema.json",
  "name": "hono-vite-react-stack-example",
  "compatibility_date": "2025-03-20",
  "main": "./src/server/index.tsx",
  "assets": {
    "directory": "dist"
  }
}
</file>

<file path="wrangler.toml">
name = "leasy-invoice-generator"
main = "dist-server/index.js"
compatibility_date = "2024-01-01"

[build]
command = "npm run build"

[site]
bucket = "./dist"

# Uncomment and configure for production
# [env.production]
# vars = { ENVIRONMENT = "production" }
# kv_namespaces = []
</file>

<file path="src/client/components/ui/badge.tsx">
import * as React from 'react'
import { cva, type VariantProps } from 'class-variance-authority'
import { cn } from '@/client/lib/utils'

const badgeVariants = cva(
  'inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2',
  {
    variants: {
      variant: {
        default:
          'border-transparent bg-primary text-primary-foreground shadow-sm hover:bg-primary/80 hover:shadow-glow-sm',
        secondary:
          'border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80',
        destructive:
          'border-transparent bg-destructive/10 text-destructive border-destructive/20 hover:bg-destructive/20',
        outline: 'text-foreground border-border',
        success:
          'border-transparent bg-emerald-500/10 text-emerald-400 border-emerald-500/20 hover:bg-emerald-500/20',
        warning:
          'border-transparent bg-amber-500/10 text-amber-400 border-amber-500/20 hover:bg-amber-500/20',
      },
    },
    defaultVariants: {
      variant: 'default',
    },
  }
)

export interface BadgeProps
  extends React.HTMLAttributes<HTMLDivElement>,
    VariantProps<typeof badgeVariants> {}

function Badge({ className, variant, ...props }: BadgeProps) {
  return (
    <div className={cn(badgeVariants({ variant }), className)} {...props} />
  )
}

export { Badge, badgeVariants }
</file>

<file path="src/client/components/ui/button.tsx">
import * as React from 'react'
import { Slot } from '@radix-ui/react-slot'
import { cva, type VariantProps } from 'class-variance-authority'
import { cn } from '@/client/lib/utils'

const buttonVariants = cva(
  'inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-lg text-sm font-medium transition-all duration-200 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0',
  {
    variants: {
      variant: {
        default: 'bg-primary text-primary-foreground shadow-sm hover:bg-primary/90 hover:shadow-md hover:scale-[1.02] active:scale-[0.98]',
        destructive: 'bg-destructive text-destructive-foreground shadow-sm hover:bg-destructive/90 hover:shadow-md hover:scale-[1.02] active:scale-[0.98]',
        outline: 'border border-input bg-transparent shadow-sm hover:bg-accent hover:text-accent-foreground hover:border-accent',
        secondary: 'bg-secondary text-secondary-foreground shadow-sm hover:bg-secondary/80 hover:shadow-md',
        ghost: 'hover:bg-accent hover:text-accent-foreground',
        link: 'text-primary underline-offset-4 hover:underline',
      },
      size: {
        default: 'h-9 px-4 py-2',
        sm: 'h-8 rounded-md px-3 text-xs',
        lg: 'h-10 rounded-md px-8',
        icon: 'h-9 w-9',
      },
    },
    defaultVariants: {
      variant: 'default',
      size: 'default',
    },
  }
)

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : 'button'
    return (
      <Comp
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      />
    )
  }
)
Button.displayName = 'Button'

export { Button, buttonVariants }
</file>

<file path="src/client/components/ui/card.tsx">
import * as React from 'react'
import { cn } from '@/client/lib/utils'

const Card = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      'rounded-xl border bg-card text-card-foreground shadow-sm transition-all duration-200 hover:shadow-md hover:border-muted-foreground/20',
      className
    )}
    {...props}
  />
))
Card.displayName = 'Card'

const CardHeader = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn('flex flex-col space-y-1.5 p-6', className)}
    {...props}
  />
))
CardHeader.displayName = 'CardHeader'

const CardTitle = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLHeadingElement>
>(({ className, ...props }, ref) => (
  <h3
    ref={ref}
    className={cn('font-semibold leading-none tracking-tight', className)}
    {...props}
  />
))
CardTitle.displayName = 'CardTitle'

const CardDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => (
  <p
    ref={ref}
    className={cn('text-sm text-muted-foreground', className)}
    {...props}
  />
))
CardDescription.displayName = 'CardDescription'

const CardContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn('p-6 pt-0', className)} {...props} />
))
CardContent.displayName = 'CardContent'

const CardFooter = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn('flex items-center p-6 pt-0', className)}
    {...props}
  />
))
CardFooter.displayName = 'CardFooter'

export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }
</file>

<file path="src/client/components/ui/input.tsx">
import * as React from 'react'
import { cn } from '@/client/lib/utils'

export interface InputProps
  extends React.InputHTMLAttributes<HTMLInputElement> {}

const Input = React.forwardRef<HTMLInputElement, InputProps>(
  ({ className, type, ...props }, ref) => {
    return (
      <input
        type={type}
        className={cn(
          'flex h-10 w-full rounded-lg border border-input bg-background/50 px-3 py-2 text-sm shadow-sm transition-all duration-200 file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground hover:border-muted-foreground/50 focus:border-primary focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50',
          className
        )}
        ref={ref}
        {...props}
      />
    )
  }
)
Input.displayName = 'Input'

export { Input }
</file>

<file path="src/client/components/ui/select.tsx">
import * as React from 'react'
import * as SelectPrimitive from '@radix-ui/react-select'
import { Check, ChevronDown, ChevronUp } from 'lucide-react'
import { cn } from '@/client/lib/utils'

const Select = SelectPrimitive.Root

const SelectGroup = SelectPrimitive.Group

const SelectValue = SelectPrimitive.Value

const SelectTrigger = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Trigger
    ref={ref}
    className={cn(
      'flex h-9 w-full items-center justify-between whitespace-nowrap rounded-md border border-input bg-card/50 backdrop-blur-xs px-3 py-2 text-sm shadow-sm ring-offset-background transition-all duration-200 placeholder:text-muted-foreground hover:bg-card/80 hover:border-border focus:outline-none focus:ring-2 focus:ring-ring/50 focus:border-primary/50 focus:bg-card disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1',
      className
    )}
    {...props}
  >
    {children}
    <SelectPrimitive.Icon asChild>
      <ChevronDown className="h-4 w-4 opacity-50 transition-transform duration-200" />
    </SelectPrimitive.Icon>
  </SelectPrimitive.Trigger>
))
SelectTrigger.displayName = SelectPrimitive.Trigger.displayName

const SelectScrollUpButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollUpButton
    ref={ref}
    className={cn(
      'flex cursor-default items-center justify-center py-1 text-muted-foreground',
      className
    )}
    {...props}
  >
    <ChevronUp className="h-4 w-4 animate-pulse" />
  </SelectPrimitive.ScrollUpButton>
))
SelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName

const SelectScrollDownButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollDownButton
    ref={ref}
    className={cn(
      'flex cursor-default items-center justify-center py-1 text-muted-foreground',
      className
    )}
    {...props}
  >
    <ChevronDown className="h-4 w-4 animate-pulse" />
  </SelectPrimitive.ScrollDownButton>
))
SelectScrollDownButton.displayName =
  SelectPrimitive.ScrollDownButton.displayName

const SelectContent = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>
>(({ className, children, position = 'popper', ...props }, ref) => (
  <SelectPrimitive.Portal>
    <SelectPrimitive.Content
      ref={ref}
      className={cn(
        'relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border border-border/50 bg-popover/95 backdrop-blur-md text-popover-foreground shadow-2xl shadow-black/20 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2',
        position === 'popper' &&
          'data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1',
        className
      )}
      position={position}
      {...props}
    >
      <SelectScrollUpButton />
      <SelectPrimitive.Viewport
        className={cn(
          'p-1',
          position === 'popper' &&
            'h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]'
        )}
      >
        {children}
      </SelectPrimitive.Viewport>
      <SelectScrollDownButton />
    </SelectPrimitive.Content>
  </SelectPrimitive.Portal>
))
SelectContent.displayName = SelectPrimitive.Content.displayName

const SelectLabel = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Label
    ref={ref}
    className={cn('px-2 py-1.5 text-sm font-semibold text-muted-foreground', className)}
    {...props}
  />
))
SelectLabel.displayName = SelectPrimitive.Label.displayName

const SelectItem = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Item
    ref={ref}
    className={cn(
      'relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-2 pr-8 text-sm outline-none transition-all duration-150 focus:bg-accent focus:text-accent-foreground hover:bg-accent/50 data-[state=checked]:bg-accent/30 data-[disabled]:pointer-events-none data-[disabled]:opacity-50',
      className
    )}
    {...props}
  >
    <span className="absolute right-2 flex h-3.5 w-3.5 items-center justify-center">
      <SelectPrimitive.ItemIndicator>
        <Check className="h-4 w-4 text-primary animate-scale-in" />
      </SelectPrimitive.ItemIndicator>
    </span>
    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>
  </SelectPrimitive.Item>
))
SelectItem.displayName = SelectPrimitive.Item.displayName

const SelectSeparator = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Separator
    ref={ref}
    className={cn('-mx-1 my-1 h-px bg-border/50', className)}
    {...props}
  />
))
SelectSeparator.displayName = SelectPrimitive.Separator.displayName

export {
  Select,
  SelectGroup,
  SelectValue,
  SelectTrigger,
  SelectContent,
  SelectLabel,
  SelectItem,
  SelectSeparator,
  SelectScrollUpButton,
  SelectScrollDownButton,
}
</file>

<file path="src/client/components/ui/sonner.tsx">
import { Toaster as Sonner } from 'sonner'

type ToasterProps = React.ComponentProps<typeof Sonner>

const Toaster = ({ ...props }: ToasterProps) => {
  return (
    <Sonner
      theme="light"
      className="toaster group"
      toastOptions={{
        classNames: {
          toast:
            'group toast group-[.toaster]:bg-background group-[.toaster]:text-foreground group-[.toaster]:border-border group-[.toaster]:shadow-lg',
          description: 'group-[.toast]:text-muted-foreground',
          actionButton:
            'group-[.toast]:bg-primary group-[.toast]:text-primary-foreground',
          cancelButton:
            'group-[.toast]:bg-muted group-[.toast]:text-muted-foreground',
        },
      }}
      {...props}
    />
  )
}

export { Toaster }
</file>

<file path="src/client/components/ui/table.tsx">
import * as React from 'react'
import { cn } from '@/client/lib/utils'

const Table = React.forwardRef<
  HTMLTableElement,
  React.HTMLAttributes<HTMLTableElement>
>(({ className, ...props }, ref) => (
  <div className="relative w-full overflow-auto rounded-lg border border-border/50">
    <table
      ref={ref}
      className={cn('w-full caption-bottom text-sm', className)}
      {...props}
    />
  </div>
))
Table.displayName = 'Table'

const TableHeader = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <thead ref={ref} className={cn('border-b bg-muted/50', className)} {...props} />
))
TableHeader.displayName = 'TableHeader'

const TableBody = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <tbody
    ref={ref}
    className={cn('[&_tr:last-child]:border-0 [&_tr:hover]:bg-muted/50 transition-colors', className)}
    {...props}
  />
))
TableBody.displayName = 'TableBody'

const TableFooter = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <tfoot
    ref={ref}
    className={cn(
      'border-t bg-muted/50 font-medium [&>tr]:last:border-b-0',
      className
    )}
    {...props}
  />
))
TableFooter.displayName = 'TableFooter'

const TableRow = React.forwardRef<
  HTMLTableRowElement,
  React.HTMLAttributes<HTMLTableRowElement>
>(({ className, ...props }, ref) => (
  <tr
    ref={ref}
    className={cn(
      'border-b border-border/50 transition-all hover:bg-muted/30 data-[state=selected]:bg-muted',
      className
    )}
    {...props}
  />
))
TableRow.displayName = 'TableRow'

const TableHead = React.forwardRef<
  HTMLTableCellElement,
  React.ThHTMLAttributes<HTMLTableCellElement>
>(({ className, ...props }, ref) => (
  <th
    ref={ref}
    className={cn(
      'h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px]',
      className
    )}
    {...props}
  />
))
TableHead.displayName = 'TableHead'

const TableCell = React.forwardRef<
  HTMLTableCellElement,
  React.TdHTMLAttributes<HTMLTableCellElement>
>(({ className, ...props }, ref) => (
  <td
    ref={ref}
    className={cn(
      'p-4 align-middle [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px]',
      className
    )}
    {...props}
  />
))
TableCell.displayName = 'TableCell'

const TableCaption = React.forwardRef<
  HTMLTableCaptionElement,
  React.HTMLAttributes<HTMLTableCaptionElement>
>(({ className, ...props }, ref) => (
  <caption
    ref={ref}
    className={cn('mt-4 text-sm text-muted-foreground', className)}
    {...props}
  />
))
TableCaption.displayName = 'TableCaption'

export {
  Table,
  TableHeader,
  TableBody,
  TableFooter,
  TableHead,
  TableRow,
  TableCell,
  TableCaption,
}
</file>

<file path="src/client/components/layout.tsx">
import { ReactNode } from 'react'
import { Building2 } from 'lucide-react'

interface LayoutProps {
  children: ReactNode
}

export function Layout({ children }: LayoutProps) {
  return (
    <div className="min-h-screen bg-background">
      <header className="sticky top-0 z-50 w-full border-b bg-background/95 backdrop-blur">
        <div className="container mx-auto px-4 h-16 flex items-center justify-between">
          <div className="flex items-center space-x-4">
            <a href="/dashboard" className="flex items-center space-x-2">
              <Building2 className="h-6 w-6" />
              <span className="text-lg font-semibold">Leasy</span>
            </a>
          </div>
          
          <nav className="flex items-center space-x-4">
            <a href="/dashboard" className="text-sm font-medium">Dashboard</a>
            <a href="/invoices/new" className="text-sm font-medium">New Invoice</a>
          </nav>
        </div>
      </header>
      
      <main className="container mx-auto px-4 py-8">
        {children}
      </main>
    </div>
  )
}
</file>

<file path="src/client/pages/dashboard.tsx">
import { Layout } from '@/client/components/layout'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/client/components/ui/card'
import { Button } from '@/client/components/ui/button'
import { Badge } from '@/client/components/ui/badge'
import { 
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from '@/client/components/ui/table'
import { 
  FileText, 
  Users, 
  Building2, 
  DollarSign,
  Plus
} from 'lucide-react'

export function DashboardPage() {
  // Mock data for now
  const stats = {
    outstandingInvoices: 5,
    monthlyRevenue: 45000,
    occupancyRate: 92,
    totalTenants: 23
  }

  const recentInvoices = [
    { id: '1', tenant: 'ABC Corp', amount: 5000, status: 'paid', date: '2024-01-15' },
    { id: '2', tenant: 'XYZ LLC', amount: 3500, status: 'sent', date: '2024-01-14' },
    { id: '3', tenant: 'Tech Startup Inc', amount: 2800, status: 'overdue', date: '2024-01-10' },
  ]

  const getStatusVariant = (status: string) => {
    switch (status) {
      case 'paid': return 'success'
      case 'sent': return 'default'
      case 'overdue': return 'destructive'
      default: return 'secondary'
    }
  }

  return (
    <Layout>
      <div className="space-y-8">
        <div>
          <h1 className="text-3xl font-bold">Dashboard</h1>
          <p className="text-muted-foreground">Welcome back! Here's an overview of your properties.</p>
        </div>

        {/* Stats Grid */}
        <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-4">
          <Card>
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium">Outstanding Invoices</CardTitle>
              <FileText className="h-4 w-4 text-muted-foreground" />
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold">{stats.outstandingInvoices}</div>
              <p className="text-xs text-muted-foreground">Awaiting payment</p>
            </CardContent>
          </Card>

          <Card>
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium">Monthly Revenue</CardTitle>
              <DollarSign className="h-4 w-4 text-muted-foreground" />
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold">${stats.monthlyRevenue.toLocaleString()}</div>
              <p className="text-xs text-muted-foreground">This month</p>
            </CardContent>
          </Card>

          <Card>
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium">Occupancy Rate</CardTitle>
              <Building2 className="h-4 w-4 text-muted-foreground" />
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold">{stats.occupancyRate}%</div>
              <p className="text-xs text-muted-foreground">Current occupancy</p>
            </CardContent>
          </Card>

          <Card>
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium">Total Tenants</CardTitle>
              <Users className="h-4 w-4 text-muted-foreground" />
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold">{stats.totalTenants}</div>
              <p className="text-xs text-muted-foreground">Active tenants</p>
            </CardContent>
          </Card>
        </div>

        {/* Recent Invoices */}
        <Card>
          <CardHeader>
            <div className="flex items-center justify-between">
              <div>
                <CardTitle>Recent Invoices</CardTitle>
                <CardDescription>Your latest invoice activity</CardDescription>
              </div>
              <Button asChild size="sm">
                <a href="/invoices/new">
                  <Plus className="mr-2 h-4 w-4" />
                  New Invoice
                </a>
              </Button>
            </div>
          </CardHeader>
          <CardContent>
            <Table>
              <TableHeader>
                <TableRow>
                  <TableHead>Invoice ID</TableHead>
                  <TableHead>Tenant</TableHead>
                  <TableHead>Amount</TableHead>
                  <TableHead>Date</TableHead>
                  <TableHead>Status</TableHead>
                </TableRow>
              </TableHeader>
              <TableBody>
                {recentInvoices.map((invoice) => (
                  <TableRow key={invoice.id}>
                    <TableCell className="font-medium">#{invoice.id}</TableCell>
                    <TableCell>{invoice.tenant}</TableCell>
                    <TableCell>${invoice.amount.toLocaleString()}</TableCell>
                    <TableCell>{invoice.date}</TableCell>
                    <TableCell>
                      <Badge variant={getStatusVariant(invoice.status)}>
                        {invoice.status}
                      </Badge>
                    </TableCell>
                  </TableRow>
                ))}
              </TableBody>
            </Table>
          </CardContent>
        </Card>
      </div>
    </Layout>
  )
}
</file>

<file path="src/client/index.tsx">
import { StrictMode } from 'react'
import { createRoot } from 'react-dom/client'
import App from './app'

// Initialize MSW in development
async function enableMocking() {
  if (process.env.NODE_ENV !== 'development') {
    return
  }

  const { worker } = await import('./mocks/browser')

  // Start the worker with onUnhandledRequest set to bypass for unhandled requests
  return worker.start({
    onUnhandledRequest: 'bypass',
  })
}

enableMocking().then(() => {
  createRoot(document.getElementById('root')!).render(
    <StrictMode>
      <App />
    </StrictMode>,
  )
})
</file>

<file path=".gitignore">
# Dependencies
node_modules/

# Build outputs
dist/
dist-server/
.wrangler/

# Environment files
.env
.env.local
.env.production

# Logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# Testing
coverage/
.nyc_output
test-results/
playwright-report/

# IDE
.vscode/
.idea/
*.swp
*.swo
*~

# OS
.DS_Store
Thumbs.db

# Misc
*.pem
.cache/
</file>

<file path="README.md">
# Leasy - Invoice Generator

A modern invoice generator web app for commercial building owners managing multiple tenants.

## Features

- 🔐 **Authentication** - Google OAuth login with Better Auth
- 📊 **Dashboard** - Overview of properties, tenants, and revenue metrics
- 📄 **Invoice Generation** - Create professional invoices with line items
- 📑 **PDF Export** - Generate downloadable PDF invoices
- 🏢 **Multi-tenant** - Manage multiple buildings and tenants
- 🎨 **Modern UI** - Clean interface built with Tailwind CSS

## Tech Stack

- **Frontend**: React 19 + TypeScript + TanStack Query + Tailwind CSS
- **Backend**: Hono.js + Cloudflare Workers
- **Auth**: Better Auth with Google OAuth
- **PDF**: React PDF
- **Testing**: Vitest + Playwright

## Getting Started

### Prerequisites

- Node.js 18+
- npm or yarn
- Google OAuth credentials (for authentication)

### Installation

```bash
# Clone the repository
git clone <your-repo-url>
cd leasy

# Install dependencies
npm install
```

### Environment Setup

Create a `.env` file in the root directory:

```env
GOOGLE_CLIENT_ID=your-google-client-id
GOOGLE_CLIENT_SECRET=your-google-client-secret
```

### Development

```bash
# Start the development server
npm run dev

# Run tests
npm run test          # Unit tests
npm run test:e2e      # E2E tests
npm run test:all      # All tests

# Type checking
npm run typecheck

# Build for production
npm run build

# Preview production build
npm run preview

# Deploy to Cloudflare Workers
npm run deploy
```

## Project Structure

```
src/
├── client/           # React frontend
│   ├── components/   # UI components
│   ├── pages/        # Page components
│   ├── hooks/        # Custom React hooks
│   └── lib/          # Utilities and auth client
├── server/           # Hono backend
│   ├── routes/       # API endpoints
│   ├── services/     # Business logic
│   ├── middleware/   # Auth middleware
│   └── db/           # In-memory database
└── shared/           # Shared types and schemas
    ├── types.ts      # TypeScript types
    └── schemas.ts    # Zod validation schemas
```

## API Endpoints

- `GET /api/buildings` - List all buildings
- `POST /api/buildings` - Create a building
- `GET /api/tenants` - List all tenants
- `POST /api/tenants` - Create a tenant
- `GET /api/invoices` - List all invoices
- `POST /api/invoices` - Create an invoice
- `POST /api/invoices/:id/generate-pdf` - Generate PDF
- `GET /api/invoices/:id/pdf` - Download PDF

## License

MIT
</file>

<file path="tailwind.config.ts">
import type { Config } from 'tailwindcss'

export default {
  darkMode: 'class',
  content: [
    './src/**/*.{js,jsx,ts,tsx}',
    './index.html',
  ],
  theme: {
    container: {
      center: true,
      padding: '2rem',
      screens: {
        '2xl': '1400px',
      },
    },
    extend: {
      colors: {
        border: 'hsl(var(--border))',
        input: 'hsl(var(--input))',
        ring: 'hsl(var(--ring))',
        background: 'hsl(var(--background))',
        foreground: 'hsl(var(--foreground))',
        primary: {
          DEFAULT: 'hsl(var(--primary))',
          foreground: 'hsl(var(--primary-foreground))',
        },
        secondary: {
          DEFAULT: 'hsl(var(--secondary))',
          foreground: 'hsl(var(--secondary-foreground))',
        },
        destructive: {
          DEFAULT: 'hsl(var(--destructive))',
          foreground: 'hsl(var(--destructive-foreground))',
        },
        muted: {
          DEFAULT: 'hsl(var(--muted))',
          foreground: 'hsl(var(--muted-foreground))',
        },
        accent: {
          DEFAULT: 'hsl(var(--accent))',
          foreground: 'hsl(var(--accent-foreground))',
        },
        popover: {
          DEFAULT: 'hsl(var(--popover))',
          foreground: 'hsl(var(--popover-foreground))',
        },
        card: {
          DEFAULT: 'hsl(var(--card))',
          foreground: 'hsl(var(--card-foreground))',
        },
      },
      borderRadius: {
        lg: 'var(--radius)',
        md: 'calc(var(--radius) - 2px)',
        sm: 'calc(var(--radius) - 4px)',
      },
      fontFamily: {
        sans: ['Inter', '-apple-system', 'BlinkMacSystemFont', 'Segoe UI', 'Roboto', 'sans-serif'],
      },
      keyframes: {
        'accordion-down': {
          from: { height: '0' },
          to: { height: 'var(--radix-accordion-content-height)' },
        },
        'accordion-up': {
          from: { height: 'var(--radix-accordion-content-height)' },
          to: { height: '0' },
        },
        'fade-in': {
          from: { opacity: '0' },
          to: { opacity: '1' },
        },
        'fade-out': {
          from: { opacity: '1' },
          to: { opacity: '0' },
        },
        'slide-in': {
          from: { transform: 'translateY(100%)' },
          to: { transform: 'translateY(0)' },
        },
        'slide-out': {
          from: { transform: 'translateY(0)' },
          to: { transform: 'translateY(100%)' },
        },
        'scale-in': {
          from: { transform: 'scale(0.95)', opacity: '0' },
          to: { transform: 'scale(1)', opacity: '1' },
        },
        'scale-out': {
          from: { transform: 'scale(1)', opacity: '1' },
          to: { transform: 'scale(0.95)', opacity: '0' },
        },
        'glow': {
          '0%, 100%': { opacity: '1' },
          '50%': { opacity: '0.5' },
        },
        'shimmer': {
          '100%': {
            transform: 'translateX(100%)',
          },
        },
      },
      animation: {
        'accordion-down': 'accordion-down 0.2s ease-out',
        'accordion-up': 'accordion-up 0.2s ease-out',
        'fade-in': 'fade-in 0.2s ease-out',
        'fade-out': 'fade-out 0.2s ease-out',
        'slide-in': 'slide-in 0.2s ease-out',
        'slide-out': 'slide-out 0.2s ease-out',
        'scale-in': 'scale-in 0.2s ease-out',
        'scale-out': 'scale-out 0.2s ease-out',
        'glow': 'glow 2s ease-in-out infinite',
      },
      backdropBlur: {
        xs: '2px',
      },
      boxShadow: {
        'glow': '0 0 20px -5px hsl(var(--primary) / 0.5)',
        'glow-sm': '0 0 10px -5px hsl(var(--primary) / 0.5)',
      },
    },
  },
  plugins: [require('tailwindcss-animate')],
} satisfies Config
</file>

<file path="tsconfig.json">
{
  "compilerOptions": {
    "target": "ESNext",
    "module": "ESNext",
    "moduleResolution": "Bundler",
    "strict": true,
    "skipLibCheck": true,
    "lib": [
      "DOM",
      "DOM.Iterable",
      "ESNext"
    ],
    "types": [
      "@cloudflare/workers-types/2023-07-01",
      "vite/client"
    ],
    "jsx": "react-jsx",
    "jsxImportSource": "react",
    "paths": {
      "@/*": ["./src/*"]
    },
    "allowJs": true,
    "esModuleInterop": true,
    "resolveJsonModule": true,
    "isolatedModules": true,
    "noEmit": true
  },
  "include": ["src", "*.config.ts", "*.config.js"],
  "exclude": ["node_modules", "dist", "dist-server"]
}
</file>

<file path="src/client/pages/invoice-form.tsx">
import { useState } from 'react'
import { Layout } from '@/client/components/layout'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/client/components/ui/card'
import { Button } from '@/client/components/ui/button'
import { Input } from '@/client/components/ui/input'
import { Label } from '@/client/components/ui/label'
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/client/components/ui/select'
import { useBuildings, useLeases, useCreateInvoice } from '@/client/hooks/useApi'

export function InvoiceFormPage() {
  const [selectedBuildingId, setSelectedBuildingId] = useState<string>('')
  const [selectedLeaseId, setSelectedLeaseId] = useState<string>('')
  const [issueDate, setIssueDate] = useState<string>('')
  const [dueDate, setDueDate] = useState<string>('')
  
  const { data: buildings, isLoading: buildingsLoading } = useBuildings()
  const { data: leases, isLoading: leasesLoading } = useLeases(selectedBuildingId)
  const createInvoice = useCreateInvoice()
  
  const selectedLease = leases?.find(l => l.lease_id === selectedLeaseId)
  
  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault()
    
    if (!selectedLeaseId) {
      return
    }
    
    createInvoice.mutate({
      lease_id: selectedLeaseId,
      issue_date: issueDate || undefined,
      due_date: dueDate || undefined,
    }, {
      onSuccess: () => {
        // Reset form
        setSelectedBuildingId('')
        setSelectedLeaseId('')
        setIssueDate('')
        setDueDate('')
        
        // Redirect to dashboard after a short delay
        setTimeout(() => {
          window.location.href = '/dashboard'
        }, 2000)
      }
    })
  }
  
  return (
    <Layout>
      <div className="max-w-4xl mx-auto space-y-8">
        <div>
          <h1 className="text-3xl font-bold">Generate Invoice</h1>
          <p className="text-muted-foreground">Create a new invoice for your tenants</p>
        </div>

        <Card>
          <CardHeader>
            <CardTitle>Invoice Details</CardTitle>
            <CardDescription>Fill in the invoice information below</CardDescription>
          </CardHeader>
          <CardContent>
            <form onSubmit={handleSubmit} className="space-y-6">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div className="space-y-2">
                  <Label htmlFor="building">Building</Label>
                  <Select 
                    value={selectedBuildingId} 
                    onValueChange={(value) => {
                      setSelectedBuildingId(value)
                      setSelectedLeaseId('') // Reset lease selection
                    }}
                    disabled={buildingsLoading}
                  >
                    <SelectTrigger id="building">
                      <SelectValue placeholder={buildingsLoading ? "Loading..." : "Select a building"} />
                    </SelectTrigger>
                    <SelectContent>
                      {buildings?.map((building) => (
                        <SelectItem key={building.building_id} value={building.building_id}>
                          {building.name}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>

                <div className="space-y-2">
                  <Label htmlFor="tenant">Tenant</Label>
                  <Select 
                    value={selectedLeaseId} 
                    onValueChange={setSelectedLeaseId}
                    disabled={!selectedBuildingId || leasesLoading}
                  >
                    <SelectTrigger id="tenant">
                      <SelectValue placeholder={
                        !selectedBuildingId 
                          ? "Select a building first" 
                          : leasesLoading 
                          ? "Loading..." 
                          : "Select a tenant"
                      } />
                    </SelectTrigger>
                    <SelectContent>
                      {leases?.map((lease) => (
                        <SelectItem key={lease.lease_id} value={lease.lease_id}>
                          {lease.tenant_name}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>

                <div className="space-y-2">
                  <Label htmlFor="invoice-date">Invoice Date</Label>
                  <Input 
                    id="invoice-date" 
                    type="date" 
                    value={issueDate}
                    onChange={(e) => setIssueDate(e.target.value)}
                  />
                </div>

                <div className="space-y-2">
                  <Label htmlFor="due-date">Due Date</Label>
                  <Input 
                    id="due-date" 
                    type="date" 
                    value={dueDate}
                    onChange={(e) => setDueDate(e.target.value)}
                  />
                </div>

                <div className="space-y-2">
                  <Label htmlFor="amount">Amount</Label>
                  <Input 
                    id="amount" 
                    type="number" 
                    placeholder="0.00" 
                    value={selectedLease?.rent_amount || ''}
                    readOnly
                    disabled
                  />
                </div>

                <div className="space-y-2">
                  <Label htmlFor="description">Description</Label>
                  <Input 
                    id="description" 
                    placeholder="Monthly rent" 
                    value={selectedLease ? `Monthly Rent - ${selectedLease.tenant_name}` : ''}
                    readOnly
                    disabled
                  />
                </div>
              </div>

              <div className="flex justify-end space-x-4">
                <Button variant="outline" asChild>
                  <a href="/dashboard">Cancel</a>
                </Button>
                <Button 
                  type="submit" 
                  disabled={!selectedLeaseId || createInvoice.isPending}
                >
                  {createInvoice.isPending ? 'Creating...' : 'Generate Invoice'}
                </Button>
              </div>
            </form>
          </CardContent>
        </Card>
      </div>
    </Layout>
  )
}
</file>

<file path="src/client/pages/login.tsx">
import { Button } from '@/client/components/ui/button'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/client/components/ui/card'
import { Input } from '@/client/components/ui/input'
import { Label } from '@/client/components/ui/label'
import { MockLoginRequestSchema } from '@/shared/types'
import { useState } from 'react'
import { toast } from 'sonner'

export function LoginPage() {
  const [name, setName] = useState('')
  const [isLoading, setIsLoading] = useState(false)

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()

    // Validate input
    const parsed = MockLoginRequestSchema.safeParse({ name })
    if (!parsed.success) {
      toast.error(parsed.error.issues[0].message)
      return
    }

    setIsLoading(true)

    try {
      const response = await fetch('/api/auth/mock-login', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ name }),
      })

            if (!response.ok) {
        const error = await response.json() as { error?: string }
        throw new Error(error.error || 'Login failed')
      }

      const data = await response.json() as { token: string; user: { name: string; role: string } }

      // Store token in localStorage
      localStorage.setItem('auth_token', data.token)
      localStorage.setItem('user', JSON.stringify(data.user))

      toast.success('Login successful!')
      window.location.href = '/dashboard'
    } catch (error) {
      toast.error(error instanceof Error ? error.message : 'Login failed')
    } finally {
      setIsLoading(false)
    }
  }

  return (
    <div className="min-h-screen flex items-center justify-center bg-gray-50">
      <Card className="w-full max-w-md">
        <CardHeader>
          <CardTitle>Welcome to Leasy</CardTitle>
          <CardDescription>
            Invoice Management System for Property Managers
          </CardDescription>
        </CardHeader>
        <CardContent>
          <form onSubmit={handleSubmit} className="space-y-4">
            <div className="space-y-2">
              <Label htmlFor="name">Name</Label>
              <Input
                id="name"
                type="text"
                placeholder="Enter your name"
                value={name}
                onChange={(e) => setName(e.target.value)}
                disabled={isLoading}
                autoFocus
              />
              <p className="text-sm text-muted-foreground">
                For demo, use "Il Keun Lee"
              </p>
            </div>
            <Button
              type="submit"
              className="w-full"
              disabled={isLoading || !name.trim()}
            >
              {isLoading ? 'Logging in...' : 'Login'}
            </Button>
          </form>
        </CardContent>
      </Card>
    </div>
  )
}
</file>

<file path="src/server/db/store.ts">
import type { Building, Lease, Invoice } from '@/shared/types'

// In-memory storage - cleared on redeploy
const buildings: Building[] = [
  {
    building_id: 'bld-001',
    name: 'Main Plaza',
    address: '123 Main Street, Downtown City, DC 10001'
  },
  {
    building_id: 'bld-002',
    name: 'Tech Center',
    address: '456 Innovation Drive, Tech Park, TC 20002'
  },
  {
    building_id: 'bld-003',
    name: 'West Tower',
    address: '789 West Avenue, Business District, WD 30003'
  }
]

const leases: Lease[] = [
  {
    lease_id: 'lease-001',
    building_id: 'bld-001',
    tenant_name: 'ABC Corp',
    rent_amount: 5000,
    start_date: '2024-01-01',
    end_date: '2024-12-31'
  },
  {
    lease_id: 'lease-002',
    building_id: 'bld-001',
    tenant_name: 'XYZ LLC',
    rent_amount: 3500,
    start_date: '2024-01-01',
    end_date: '2024-12-31'
  },
  {
    lease_id: 'lease-003',
    building_id: 'bld-002',
    tenant_name: 'Tech Startup Inc',
    rent_amount: 2800,
    start_date: '2024-01-01',
    end_date: '2024-12-31'
  },
  {
    lease_id: 'lease-004',
    building_id: 'bld-002',
    tenant_name: 'Innovation Labs',
    rent_amount: 4200,
    start_date: '2024-01-01',
    end_date: '2024-12-31'
  },
  {
    lease_id: 'lease-005',
    building_id: 'bld-003',
    tenant_name: 'Finance Solutions',
    rent_amount: 6500,
    start_date: '2024-01-01',
    end_date: '2024-12-31'
  }
]

const invoices: Invoice[] = [
  {
    invoice_id: 'inv-001',
    lease_id: 'lease-001',
    issue_date: '2024-01-01',
    due_date: '2024-01-15',
    status: 'paid',
    lines: [
      { description: 'Monthly Rent - January 2024', amount: 5000 }
    ],
    total_amount: 5000
  },
  {
    invoice_id: 'inv-002',
    lease_id: 'lease-002',
    issue_date: '2024-01-01',
    due_date: '2024-01-14',
    status: 'sent',
    lines: [
      { description: 'Monthly Rent - January 2024', amount: 3500 }
    ],
    total_amount: 3500
  },
  {
    invoice_id: 'inv-003',
    lease_id: 'lease-003',
    issue_date: '2024-01-01',
    due_date: '2024-01-10',
    status: 'overdue',
    lines: [
      { description: 'Monthly Rent - January 2024', amount: 2800 }
    ],
    total_amount: 2800
  }
]

// CRUD operations
export const store = {
  buildings: {
    getAll: () => [...buildings],
    getById: (id: string) => buildings.find(b => b.building_id === id)
  },
  
  leases: {
    getAll: () => [...leases],
    getByBuildingId: (buildingId: string) => 
      leases.filter(l => l.building_id === buildingId),
    getById: (id: string) => leases.find(l => l.lease_id === id)
  },
  
  invoices: {
    getAll: () => [...invoices],
    getById: (id: string) => invoices.find(i => i.invoice_id === id),
    create: (invoice: Invoice) => {
      invoices.push(invoice)
      return invoice
    }
  }
}

// Helper to generate unique IDs
export function generateId(prefix: string): string {
  const timestamp = Date.now()
  const random = Math.floor(Math.random() * 1000)
  return `${prefix}-${timestamp}-${random}`
}
</file>

<file path="src/server/index.tsx">
import { Hono } from 'hono'
import { renderer } from './renderer'
import api from './api'

const app = new Hono()

app.route('/api', api)

app.use(renderer)

app.get('/', (c) => {
  return c.redirect('/dashboard')
})

app.get('/dashboard', (c) => {
  return c.render(
    <>
      <title>Leasy - Dashboard</title>
      <div id="root"></div>
    </>
  )
})

app.get('/invoices/new', (c) => {
  return c.render(
    <>
      <title>Leasy - Generate Invoice</title>
      <div id="root"></div>
    </>
  )
})

export default app
</file>

<file path="tests/e2e/auth.spec.ts">
import { expect, test } from '@playwright/test'

test.describe('Mock Authentication API', () => {
  const API_BASE = process.env.API_URL || 'http://localhost:5173/api'

  test('POST /api/auth/mock-login accepts "Il Keun Lee" and returns success', async ({ request }) => {
    const response = await request.post(`${API_BASE}/auth/mock-login`, {
      data: {
        name: 'Il Keun Lee'
      }
    })

    expect(response.ok()).toBeTruthy()
    expect(response.status()).toBe(200)

    const body = await response.json()
    expect(body).toHaveProperty('token')
    expect(body).toHaveProperty('user')
    expect(body.user).toMatchObject({
      name: 'Il Keun Lee',
      role: 'owner'
    })
  })

  test('Mock login creates a session token', async ({ request }) => {
    const response = await request.post(`${API_BASE}/auth/mock-login`, {
      data: {
        name: 'Il Keun Lee'
      }
    })

    const body = await response.json()
    expect(body.token).toBeTruthy()
    expect(typeof body.token).toBe('string')
    expect(body.token.length).toBeGreaterThan(0)
  })

  test('Invalid/empty name returns 400 error', async ({ request }) => {
    // Test empty name
    const emptyResponse = await request.post(`${API_BASE}/auth/mock-login`, {
      data: {
        name: ''
      }
    })

    expect(emptyResponse.status()).toBe(400)
    const emptyBody = await emptyResponse.json()
    expect(emptyBody).toHaveProperty('error')

    // Test missing name field
    const missingResponse = await request.post(`${API_BASE}/auth/mock-login`, {
      data: {}
    })

    expect(missingResponse.status()).toBe(400)
    const missingBody = await missingResponse.json()
    expect(missingBody).toHaveProperty('error')
  })

  test('Session persists across requests', async ({ request }) => {
    // First, login
    const loginResponse = await request.post(`${API_BASE}/auth/mock-login`, {
      data: {
        name: 'Il Keun Lee'
      }
    })

    const { token } = await loginResponse.json()

    // Then, make authenticated request
    const dashboardResponse = await request.get(`${API_BASE}/dashboard`, {
      headers: {
        'Authorization': `Bearer ${token}`
      }
    })

    expect(dashboardResponse.ok()).toBeTruthy()
  })

  test('Logout clears session', async ({ request }) => {
    // First, login
    const loginResponse = await request.post(`${API_BASE}/auth/mock-login`, {
      data: {
        name: 'Il Keun Lee'
      }
    })

    const { token } = await loginResponse.json()

    // Then, logout
    const logoutResponse = await request.post(`${API_BASE}/auth/logout`, {
      headers: {
        'Authorization': `Bearer ${token}`
      }
    })

    expect(logoutResponse.ok()).toBeTruthy()

    // Try to access protected route
    const dashboardResponse = await request.get(`${API_BASE}/dashboard`, {
      headers: {
        'Authorization': `Bearer ${token}`
      }
    })

    expect(dashboardResponse.status()).toBe(401)
  })
})
</file>

<file path="tests/e2e/dashboard.spec.ts">
import { expect, test } from '@playwright/test'

test.describe('Dashboard API', () => {
  const API_BASE = process.env.API_URL || 'http://localhost:5173/api'
  let authToken: string

  test.beforeEach(async ({ request }) => {
    // Login before each test
    const loginResponse = await request.post(`${API_BASE}/auth/mock-login`, {
      data: {
        name: 'Il Keun Lee'
      }
    })
    const loginData = await loginResponse.json()
    authToken = loginData.token
  })

  test('GET /api/dashboard returns building data for logged-in user', async ({ request }) => {
    const response = await request.get(`${API_BASE}/dashboard`, {
      headers: {
        'Authorization': `Bearer ${authToken}`
      }
    })

    expect(response.ok()).toBeTruthy()
    expect(response.status()).toBe(200)

    const body = await response.json()
    expect(body).toHaveProperty('building')
    expect(body).toHaveProperty('summary')
  })

  test('Dashboard shows PNL building information', async ({ request }) => {
    const response = await request.get(`${API_BASE}/dashboard`, {
      headers: {
        'Authorization': `Bearer ${authToken}`
      }
    })

    const body = await response.json()
    expect(body.building).toMatchObject({
      id: 'pnl-001',
      name: 'PNL Building',
      address: '서울특별시 강남구 논현로 159길 17',
      owner: 'Il Keun Lee'
    })
  })

  test('Dashboard calculates total monthly revenue correctly (₩27,333,581)', async ({ request }) => {
    const response = await request.get(`${API_BASE}/dashboard`, {
      headers: {
        'Authorization': `Bearer ${authToken}`
      }
    })

    const body = await response.json()
    // The exact amount from the Excel sheet: ₩27,333,581
    expect(body.building.monthlyRevenue).toBe(27333581)
    expect(body.summary.totalMonthlyRevenue).toBe(27333581)
  })

  test('Dashboard shows correct tenant count (12 occupied units)', async ({ request }) => {
    const response = await request.get(`${API_BASE}/dashboard`, {
      headers: {
        'Authorization': `Bearer ${authToken}`
      }
    })

    const body = await response.json()
    expect(body.building.totalUnits).toBe(13)
    expect(body.building.occupiedUnits).toBe(12)
    expect(body.summary.totalTenants).toBe(12)
  })

  test('Unauthorized request returns 401 error', async ({ request }) => {
    // Request without token
    const response = await request.get(`${API_BASE}/dashboard`)

    expect(response.status()).toBe(401)
    const body = await response.json()
    expect(body).toHaveProperty('error')
    expect(body.error).toBe('Unauthorized')
  })
})
</file>

<file path="CLAUDE.md">
# CLAUDE.md

This file provides guidance to Claude Code (claude.ai/code) when working with code in this repository.

## Project Overview
Leasy is a modern invoice generator web app for commercial building owners managing multiple tenants. Built with React + Hono + Vite, it provides a complete invoice management system with authentication and PDF export capabilities.

## Development Commands
```bash
# Development
npm run dev         # Start Vite dev server (port 5173)
npm run preview     # Preview production build

# Build & Deploy
npm run build       # Build client and server bundles
npm run deploy      # Deploy to Cloudflare Workers

# Testing
npm run test        # Run unit tests with Vitest
npm run test:e2e    # Run E2E tests with Playwright
npm run test:e2e:ui # Run E2E tests with UI interface
npm run test:all    # Run all tests
npm run typecheck   # TypeScript type checking
```

## Architecture
- **Server** (src/server/): Hono server with REST API on Cloudflare Workers
  - `index.tsx`: Main server with routes
  - `api/`: Modular API endpoints
    - `auth.ts`: Mock authentication endpoints
    - `dashboard.ts`: Dashboard data endpoints
    - `invoices.ts`: Invoice CRUD and generation
    - `tenants.ts`: Tenant management
  - `renderer.tsx`: HTML renderer for React app
  - `db/`: In-memory data storage
    - `store.ts`: Main data store with seed data
    - `pnl-data.ts`: PNL building revenue data
  
- **Client** (src/client/): React 19 SPA with TanStack Query
  - `pages/`: Dashboard, Invoice Form, Login pages
  - `components/`: Layout and shadcn/ui components
  - `hooks/useApi.ts`: React Query hooks for API integration
  - `lib/`: Auth client setup (Better Auth)
  - `mocks/`: MSW for development
  - `app.tsx`: Main app with routing
  
- **Shared** (src/shared/): Type definitions
  - `types.ts`: Zod schemas and TypeScript types for data models
  
## Key Features
- 🔐 **Authentication**: Mock login system (Google OAuth ready)
- 📊 **Dashboard**: Overview with building metrics (₩27,333,581 monthly revenue)
- 🏢 **Multi-tenant**: Manage multiple buildings and tenants
- 📄 **Invoice Generation**: Create invoices with validation
- 📑 **PDF Export**: Generate downloadable PDF invoices (placeholder)
- 🎨 **Modern UI**: Tailwind CSS + shadcn/ui components
- 🔄 **Real-time Updates**: React Query for data fetching

## API Endpoints
### Authentication
- `POST /api/auth/mock-login` - Mock authentication (returns session token)

### Dashboard & Buildings
- `GET /api/dashboard` - Building overview data with metrics
- `GET /api/buildings` - List all buildings for current owner
- `GET /api/leases?building_id={id}` - Get leases for a specific building

### Tenants
- `GET /api/tenants` - List all tenants with billing information

### Invoices
- `POST /api/invoices` - Create new invoice
- `POST /api/invoices/generate` - Generate multiple invoices
- `GET /api/invoices/{id}` - Get specific invoice
- `POST /api/invoices/{id}/generate-pdf` - Generate PDF (placeholder)
- `GET /api/invoices/{id}/pdf` - Download PDF (placeholder)

### Health
- `GET /api/healthz` - Health check endpoint

## Environment Setup
Create a `.env` file for OAuth configuration:
```env
GOOGLE_CLIENT_ID=your-google-client-id
GOOGLE_CLIENT_SECRET=your-google-client-secret
```

## Development Notes
- Path alias `@/` maps to `src/` directory
- TypeScript configured for ESNext with strict mode
- In-memory data storage (resets on server restart)
- Mock authentication with localStorage token storage
- PDF generation currently returns placeholder response
- Single user system (Il Keun Lee) for MVP
- Comprehensive E2E test coverage with Playwright
- Edge-optimized for Cloudflare Workers deployment

## Testing Strategy
- Unit tests for utilities and hooks
- E2E tests cover all user flows and acceptance criteria
- Test server runs on port 5173 (same as dev)
- Use `npm run test:e2e:ui` for interactive debugging
</file>

<file path="vite.config.ts">
import reactStack from 'hono-vite-react-stack'
import { defineConfig } from 'vite'
import { fileURLToPath, URL } from 'node:url'

export default defineConfig({
  plugins: [reactStack()],
  resolve: {
    alias: {
      '@': fileURLToPath(new URL('./src', import.meta.url)),
    },
  },
  server: {
    hmr: {
      overlay: false,
    },
  },
})
</file>

<file path=".claude/settings.local.json">
{
  "permissions": {
    "allow": [
      "Bash(mkdir:*)",
      "Bash(npm install)",
      "Bash(npm view:*)",
      "Bash(npm search:*)",
      "Bash(npm run dev:*)",
      "Bash(curl:*)",
      "Bash(kill:*)",
      "Bash(rm:*)",
      "Bash(npm install:*)",
      "Bash(npm run test:e2e:*)",
      "Bash(npx:*)",
      "Bash(pkill:*)",
      "Bash(true)",
      "Bash(find:*)",
      "Bash(ls:*)",
      "Bash(npm run typecheck:*)",
      "Bash(npm run test:*)",
      "Bash(npm run build:*)",
      "Bash(grep:*)",
      "Bash(timeout 10 npm run dev)",
      "Bash(node:*)",
      "Bash(cat:*)"
    ],
    "deny": []
  }
}
</file>

<file path="src/client/app.tsx">
import { Toaster } from '@/client/components/ui/sonner'
import { QueryClient, QueryClientProvider } from '@tanstack/react-query'
import { InvoiceGeneratePage } from './pages/invoice-generate'
import { LoginPage } from './pages/login'
import { MVPDashboardPage } from './pages/mvp-dashboard'

const queryClient = new QueryClient()

function AppRouter() {
  const pathname = window.location.pathname

  // Check if user is authenticated
  const isAuthenticated = !!localStorage.getItem('auth_token')

  // Redirect to login if not authenticated (except for login page)
  if (!isAuthenticated && pathname !== '/login') {
    window.location.href = '/login'
    return null
  }

  // Redirect to dashboard if authenticated and on login page
  if (isAuthenticated && pathname === '/login') {
    window.location.href = '/dashboard'
    return null
  }

  switch (pathname) {
    case '/login':
      return <LoginPage />
    case '/':
    case '/dashboard':
      return <MVPDashboardPage />
    case '/invoices/new':
    case '/invoices/generate':
      return <InvoiceGeneratePage />
    default:
      return <MVPDashboardPage />
  }
}

const App = () => {
  return (
    <QueryClientProvider client={queryClient}>
      <AppRouter />
      <Toaster />
    </QueryClientProvider>
  )
}

export default App
</file>

<file path="src/shared/types.ts">
import { z } from 'zod'

// ===== EXISTING TYPES (keep for compatibility) =====

// Building schema and type
export const BuildingSchema = z.object({
  building_id: z.string(),
  name: z.string(),
  address: z.string(),
})

export type Building = z.infer<typeof BuildingSchema>

// Lease schema and type
export const LeaseSchema = z.object({
  lease_id: z.string(),
  building_id: z.string(),
  tenant_name: z.string(),
  rent_amount: z.number(),
  start_date: z.string(),
  end_date: z.string(),
})

export type Lease = z.infer<typeof LeaseSchema>

// Invoice line item schema
export const InvoiceLineSchema = z.object({
  description: z.string(),
  amount: z.number(),
})

// Invoice schema and type
export const InvoiceSchema = z.object({
  invoice_id: z.string(),
  lease_id: z.string(),
  issue_date: z.string(),
  due_date: z.string(),
  status: z.enum(['draft', 'sent', 'paid', 'overdue']),
  lines: z.array(InvoiceLineSchema),
  total_amount: z.number(),
})

export type Invoice = z.infer<typeof InvoiceSchema>

// API request schemas
export const CreateInvoiceRequestSchema = z.object({
  lease_id: z.string(),
  issue_date: z.string().optional(),
  due_date: z.string().optional(),
})

export type CreateInvoiceRequest = z.infer<typeof CreateInvoiceRequestSchema>

// API response schemas
export const CreateInvoiceResponseSchema = z.object({
  invoice_id: z.string(),
})

export type CreateInvoiceResponse = z.infer<typeof CreateInvoiceResponseSchema>

// Query parameter schemas
export const LeaseQuerySchema = z.object({
  building_id: z.string(),
})

export type LeaseQuery = z.infer<typeof LeaseQuerySchema>

// Error response schema
export const ErrorResponseSchema = z.object({
  error: z.string(),
  code: z.string().optional(),
})

export type ErrorResponse = z.infer<typeof ErrorResponseSchema>

// ===== NEW MVP TYPES =====

// Mock authentication schemas
export const MockLoginRequestSchema = z.object({
  name: z.string().min(1, 'Name is required'),
})

export type MockLoginRequest = z.infer<typeof MockLoginRequestSchema>

export const MockLoginResponseSchema = z.object({
  token: z.string(),
  user: z.object({
    name: z.string(),
    role: z.string(),
  }),
})

export type MockLoginResponse = z.infer<typeof MockLoginResponseSchema>

// Tenant info (embedded in invoice, not separate entity)
export const TenantInfoSchema = z.object({
  name: z.string(),
  unit: z.string(),
  businessNumber: z.string().optional(),
})

export type TenantInfo = z.infer<typeof TenantInfoSchema>

// Enhanced Building schema for MVP
export const BuildingDetailSchema = z.object({
  id: z.string(),
  name: z.string(),
  address: z.string(),
  owner: z.string(),
  totalUnits: z.number(),
  occupiedUnits: z.number(),
  monthlyRevenue: z.number(),
})

export type BuildingDetail = z.infer<typeof BuildingDetailSchema>

// Dashboard response schema
export const DashboardResponseSchema = z.object({
  building: BuildingDetailSchema,
  summary: z.object({
    totalTenants: z.number(),
    totalMonthlyRevenue: z.number(),
    lastInvoiceGeneration: z.string().optional(),
  }),
})

export type DashboardResponse = z.infer<typeof DashboardResponseSchema>

// Tenant with billing info
export const TenantBillingSchema = z.object({
  id: z.string(),
  unit: z.string(),
  name: z.string(),
  businessNumber: z.string().optional(),
  monthlyRent: z.number(),
  electricityCharge: z.number(),
  waterCharge: z.number(),
  vat: z.number(),
  totalAmount: z.number(),
})

export type TenantBilling = z.infer<typeof TenantBillingSchema>

// Invoice generation request
export const GenerateInvoicesRequestSchema = z.object({
  period: z.string(), // e.g., "2025년 5월"
  tenantIds: z.array(z.string()).min(1, 'At least one tenant must be selected'),
})

export type GenerateInvoicesRequest = z.infer<typeof GenerateInvoicesRequestSchema>

// Enhanced invoice item schema
export const InvoiceItemSchema = z.object({
  description: z.string(),
  amount: z.number(),
  vat: z.number(),
})

export type InvoiceItem = z.infer<typeof InvoiceItemSchema>

// Full invoice schema for MVP
export const FullInvoiceSchema = z.object({
  id: z.string(),
  buildingId: z.string(),
  tenant: TenantInfoSchema,
  period: z.string(),
  items: z.array(InvoiceItemSchema),
  subtotal: z.number(),
  totalVat: z.number(),
  grandTotal: z.number(),
  issueDate: z.string(),
  dueDate: z.string(),
  status: z.enum(['draft', 'sent', 'paid', 'overdue']),
})

export type FullInvoice = z.infer<typeof FullInvoiceSchema>

// Invoice generation response
export const GenerateInvoicesResponseSchema = z.object({
  invoices: z.array(z.object({
    id: z.string(),
    tenantName: z.string(),
    amount: z.number(),
  })),
  count: z.number(),
})

export type GenerateInvoicesResponse = z.infer<typeof GenerateInvoicesResponseSchema>
</file>

<file path="src/style.css">
@tailwind base;
@tailwind components;
@tailwind utilities;

:root {
  /* Light theme */
  --background: 0 0% 100%;
  --foreground: 0 0% 3.9%;
  --card: 0 0% 100%;
  --card-foreground: 0 0% 3.9%;
  --popover: 0 0% 100%;
  --popover-foreground: 0 0% 3.9%;
  --primary: 221 83% 53%;
  --primary-foreground: 0 0% 100%;
  --secondary: 0 0% 96.1%;
  --secondary-foreground: 0 0% 9%;
  --muted: 0 0% 96.1%;
  --muted-foreground: 0 0% 45.1%;
  --accent: 0 0% 96.1%;
  --accent-foreground: 0 0% 9%;
  --destructive: 0 72% 51%;
  --destructive-foreground: 0 0% 98%;
  --border: 0 0% 89.8%;
  --input: 0 0% 89.8%;
  --ring: 221 83% 53%;
  --radius: 0.5rem;
}

body {
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', sans-serif;
}
</file>

<file path="tests/e2e/smoke.spec.ts">
import { test, expect } from '@playwright/test'

test.describe('Smoke Test', () => {
  test('app loads successfully', async ({ page }) => {
    await page.goto('/')
    
    // App should load and redirect to dashboard
    await expect(page).toHaveURL('/dashboard')
    
    // Should have proper title
    await expect(page).toHaveTitle(/Leasy/)
    
    // Should have header with logo
    await expect(page.getByText('Leasy')).toBeVisible()
  })

  test('dashboard shows mock data', async ({ page }) => {
    await page.goto('/dashboard')
    
    // Should show dashboard title
    await expect(page.getByRole('heading', { name: 'Dashboard' })).toBeVisible()
    
    // Should show stats cards
    await expect(page.getByText('Outstanding Invoices')).toBeVisible()
    await expect(page.getByText('Monthly Revenue')).toBeVisible()
    
    // Should show invoice table
    await expect(page.getByText('Recent Invoices')).toBeVisible()
    await expect(page.getByText('ABC Corp')).toBeVisible()
  })

  test('can navigate to invoice form', async ({ page }) => {
    await page.goto('/dashboard')
    
    // Click new invoice button in the card (not in header)
    await page.getByRole('main').getByRole('link', { name: 'New Invoice' }).click()
    
    // Should navigate to invoice form
    await expect(page).toHaveURL('/invoices/new')
    await expect(page.getByRole('heading', { name: 'Generate Invoice' })).toBeVisible()
  })
})
</file>

<file path="src/server/api.ts">
import {
    CreateInvoiceRequestSchema,
    LeaseQuerySchema,
    type Invoice
} from '@/shared/types'
import { Hono } from 'hono'
import authRoutes from './api/auth'
import dashboardRoutes from './api/dashboard'
import invoicesRoutes from './api/invoices'
import tenantsRoutes from './api/tenants'
import { generateId, store } from './db/store'

const app = new Hono()

// Mount auth routes
app.route('/auth', authRoutes)

// Mount dashboard routes
app.route('/dashboard', dashboardRoutes)

// Mount tenants routes
app.route('/tenants', tenantsRoutes)

// Mount invoices routes
app.route('/invoices', invoicesRoutes)

// Health check endpoints
app.get('/health', (c) => {
  return c.json({ status: 'ok' })
})

app.get('/healthz', (c) => {
  return c.text('ok')
})

// FR-01: Get all buildings visible to the current owner
app.get('/buildings', (c) => {
  try {
    const buildings = store.buildings.getAll()
    return c.json(buildings)
  } catch (error) {
    return c.json({ error: 'Internal server error' }, 500)
  }
})

// FR-02: Get active leases for a building
app.get('/leases', (c) => {
  try {
    const query = c.req.query()
    const parsed = LeaseQuerySchema.safeParse(query)

    if (!parsed.success) {
      return c.json({ error: 'building_id is required' }, 400)
    }

    const { building_id } = parsed.data

    // Check if building exists
    const building = store.buildings.getById(building_id)
    if (!building) {
      return c.json({ error: 'Unknown building' }, 404)
    }

    const leases = store.leases.getByBuildingId(building_id)
    return c.json(leases)
  } catch (error) {
    return c.json({ error: 'Internal server error' }, 500)
  }
})

// FR-03: Generate an invoice for a lease
app.post('/invoices', async (c) => {
  try {
    const body = await c.req.json()
    const parsed = CreateInvoiceRequestSchema.safeParse(body)

    if (!parsed.success) {
      return c.json({
        error: 'Validation failed',
        details: parsed.error.flatten()
      }, 422)
    }

    const { lease_id, issue_date, due_date } = parsed.data

    // Check if lease exists
    const lease = store.leases.getById(lease_id)
    if (!lease) {
      return c.json({ error: 'Unknown lease' }, 404)
    }

    // Generate invoice
    const today = new Date().toISOString().split('T')[0]
    const dueIn30Days = new Date(Date.now() + 30 * 24 * 60 * 60 * 1000)
      .toISOString().split('T')[0]

    const invoice: Invoice = {
      invoice_id: generateId('inv'),
      lease_id: lease_id,
      issue_date: issue_date || today,
      due_date: due_date || dueIn30Days,
      status: 'sent',
      lines: [
        {
          description: `Monthly Rent - ${lease.tenant_name}`,
          amount: lease.rent_amount
        }
      ],
      total_amount: lease.rent_amount
    }

    store.invoices.create(invoice)

    return c.json({ invoice_id: invoice.invoice_id }, 201)
  } catch (error) {
    return c.json({ error: 'Internal server error' }, 500)
  }
})

// FR-04: Fetch single invoice
app.get('/invoices/:id', (c) => {
  try {
    const id = c.req.param('id')
    const invoice = store.invoices.getById(id)

    if (!invoice) {
      return c.json({ error: 'Invoice not found' }, 404)
    }

    return c.json(invoice)
  } catch (error) {
    return c.json({ error: 'Internal server error' }, 500)
  }
})

export default app
export type AppType = typeof app
</file>

<file path="package.json">
{
  "name": "leasy-invoice-generator",
  "private": true,
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vite build && vite build --ssr",
    "typecheck": "tsc --noEmit",
    "test:e2e": "playwright test",
    "test:e2e:ui": "playwright test --ui"
  },
  "dependencies": {
    "@hono/react-renderer": "^1.0.1",
    "@radix-ui/react-avatar": "^1.1.2",
    "@radix-ui/react-checkbox": "^1.3.2",
    "@radix-ui/react-dropdown-menu": "^2.1.4",
    "@radix-ui/react-label": "^2.1.1",
    "@radix-ui/react-popover": "^1.1.5",
    "@radix-ui/react-select": "^2.1.5",
    "@radix-ui/react-slot": "^1.1.1",
    "@tanstack/react-form": "^1.14.2",
    "@tanstack/react-query": "^5.68.2",
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.1.1",
    "hono": "^4.7.6",
    "lucide-react": "^0.498.0",
    "react": "^19.1.0",
    "react-dom": "^19.1.0",
    "react-router-dom": "^7.7.1",
    "sonner": "^1.7.2",
    "tailwind-merge": "^2.6.0",
    "tailwindcss-animate": "^1.0.7",
    "zod": "^4.0.5"
  },
  "devDependencies": {
    "@cloudflare/workers-types": "^4.20250414.0",
    "@playwright/test": "^1.49.1",
    "@types/node": "^22.12.0",
    "@types/react": "^19.1.1",
    "@types/react-dom": "^19.1.2",
    "@types/react-router-dom": "^5.3.3",
    "@vitejs/plugin-react": "^4.4.4",
    "autoprefixer": "^10.4.20",
    "hono-vite-react-stack": "^0.1.3",
    "msw": "^2.10.4",
    "postcss": "^8.5.3",
    "tailwindcss": "^3.4.17",
    "typescript": "^5.7.3",
    "vite": "^6.2.6",
    "wrangler": "^4.10.0"
  }
}
</file>

</files>
